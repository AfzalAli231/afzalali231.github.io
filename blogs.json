{"status":"ok","feed":{"url":"https://medium.com/feed/@afzalimdad9","title":"Stories by Afzal Imdad on Medium","link":"https://medium.com/@afzalimdad9?source=rss-7bf9860d1ca1------2","author":"","description":"Stories by Afzal Imdad on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*FBcp84KKOWD6so5RwSpwfQ.jpeg"},"items":[{"title":"Integrating Capacitor with Next.js: A Step-by-Step Guide","pubDate":"2024-07-27 14:34:31","link":"https://afzalimdad9.medium.com/integrating-capacitor-with-next-js-a-step-by-step-guide-12943bc578ff?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/12943bc578ff","author":"Afzal Imdad","thumbnail":"","description":"\n<p>In this guide, we\u2019ll walk through how to integrate Capacitor with a Next.js project to build cross-platform mobile apps. Capacitor is a powerful tool that helps turn web applications into native mobile experiences.</p>\n<h3>Prerequisites</h3>\n<p>Before you start, ensure you have the following installed:</p>\n<ul>\n<li>Node.js and\u00a0npm</li>\n<li>Next.js</li>\n<li>Android Studio (for Android development)</li>\n<li>Xcode (for iOS development, macOS\u00a0only)</li>\n</ul>\n<h3>Step 1: Set Up Next.js\u00a0Project</h3>\n<p>First, set up your Next.js project if you haven\u2019t\u00a0already:</p>\n<pre>npx create-next-app@latest<br>cd your-next-app</pre>\n<h3>Step 2: Install Capacitor</h3>\n<p>Next, install Capacitor core and\u00a0CLI:</p>\n<pre>npm install @capacitor/core<br>npm install -D @capacitor/cli</pre>\n<p>Initialize Capacitor in your\u00a0project</p>\n<pre>npx cap init</pre>\n<p>Follow the prompts to configure your app. For\u00a0example:</p>\n<ul>\n<li>appId: com.example.app</li>\n<li>appName: example</li>\n</ul>\n<h3>Step 3: Configure Capacitor</h3>\n<p>Create or update the capacitor.config.ts file:</p>\n<pre>import type { CapacitorConfig } from '@capacitor/cli';<br>const config: CapacitorConfig = {<br>  appId: 'com.example.app',<br>  appName: 'example',<br>  webDir: 'out', // Ensure this matches your Next.js output directory<br>};export default config;</pre>\n<h3>Step 4: Install Platform\u00a0Plugins</h3>\n<p>Install the Capacitor platform plugins for Android and\u00a0iOS:</p>\n<pre>npm install @capacitor/android @capacitor/ios</pre>\n<h3>Step 5: Add Platforms</h3>\n<p>Add the Android and iOS platforms to your\u00a0project:</p>\n<pre>npx cap add android<br>npx cap add ios</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/402/0*uoDcnVUPZ3qq7gcD.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/399/0*Mcu8CjBmOZ_Q7mpI.jpeg\"></figure><h3>Step 6: Configure Next.js for Static\u00a0Export</h3>\n<p>Update your next.config.mjs to enable static exports and disable image optimization:</p>\n<pre>/** @type {import('next').NextConfig} */<br>const nextConfig = {<br>  reactStrictMode: true,<br>  images: {<br>    unoptimized: true,<br>  },<br>  output: 'export',<br>};<br>export default nextConfig;</pre>\n<h3>Step 7: Build and Export Your\u00a0Project</h3>\n<p>Build and export your Next.js\u00a0project:</p>\n<pre>npm run build</pre>\n<p>After a successful build, if the folder and file structure looks like this, the specific file names do not matter. It means the build was successful</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/401/0*y29fUu7u26-1WPrf.jpeg\"></figure><h3>Step 8: Sync Capacitor</h3>\n<p>Sync the Capacitor configuration and\u00a0assets:</p>\n<pre>npx cap sync</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*KDLD_biV0Vkkbs1Z.jpeg\"></figure><h3>Step 9: Open and Run the Android\u00a0Project</h3>\n<p>Open your Android project in Android\u00a0Studio:</p>\n<pre>npx cap open android</pre>\n<p>Run your app on an Android device or emulator directly from Android\u00a0Studio.</p>\n<h3>Step 10: Open and Run the iOS\u00a0Project</h3>\n<p>For macOS users, open your iOS project in\u00a0Xcode:</p>\n<pre>npx cap open ios</pre>\n<p>Run your app on an iOS device or simulator from\u00a0Xcode.</p>\n<h3>Step 11:Generate Apk</h3>\n<p>Before generate apk file you must have to create keyStore:</p>\n<pre>keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000</pre>\n<p>Enter keystore password: 123456<br>Enter key return password for\u00a0: 123456<br>What is your first and last name?<br>[Unknown]:<br>What is the name of your organizational unit?<br>[Unknown]:<br>What is the name of your organization?<br>[Unknown]:<br>What is the name of your City or Locality?<br>[Unknown]:<br>What is the name of your State or Province?<br>[Unknown]:<br>What is the two-letter country code for this unit?<br>[Unknown]:<br>Is CN=your name, OU=your organizational unit, O=your organization, L=your city, ST=your state, C=your country correct?<br>[no]:\u00a0yes</p>\n<h3>Step 12:Change the file Directory</h3>\n<p>move my-release-key.keystore file into Andriod\u00a0folder</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/251/0*h_Uy58lJUMGWhLGh.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/254/0*p52pB0LrL6V4ZUYC.jpeg\"></figure><pre>npx cap build android --keystorepath my-release-key.keystore --keystorepass 123456 --keystorealias alias_name --keystorealiaspass 123456 --androidreleasetype APK</pre>\n<h3>Step 13:Build\u00a0Apk</h3>\n<pre>npx cap build android</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*pLG7qmvmueGkC--f.jpeg\"></figure><h3>Step 14:Build Apk Directory</h3>\n<p>android&gt;app&gt;build&gt;apk&gt;release</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/451/0*xFbBL8LpEU3UgoJZ.jpeg\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=12943bc578ff\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>In this guide, we\u2019ll walk through how to integrate Capacitor with a Next.js project to build cross-platform mobile apps. Capacitor is a powerful tool that helps turn web applications into native mobile experiences.</p>\n<h3>Prerequisites</h3>\n<p>Before you start, ensure you have the following installed:</p>\n<ul>\n<li>Node.js and\u00a0npm</li>\n<li>Next.js</li>\n<li>Android Studio (for Android development)</li>\n<li>Xcode (for iOS development, macOS\u00a0only)</li>\n</ul>\n<h3>Step 1: Set Up Next.js\u00a0Project</h3>\n<p>First, set up your Next.js project if you haven\u2019t\u00a0already:</p>\n<pre>npx create-next-app@latest<br>cd your-next-app</pre>\n<h3>Step 2: Install Capacitor</h3>\n<p>Next, install Capacitor core and\u00a0CLI:</p>\n<pre>npm install @capacitor/core<br>npm install -D @capacitor/cli</pre>\n<p>Initialize Capacitor in your\u00a0project</p>\n<pre>npx cap init</pre>\n<p>Follow the prompts to configure your app. For\u00a0example:</p>\n<ul>\n<li>appId: com.example.app</li>\n<li>appName: example</li>\n</ul>\n<h3>Step 3: Configure Capacitor</h3>\n<p>Create or update the capacitor.config.ts file:</p>\n<pre>import type { CapacitorConfig } from '@capacitor/cli';<br>const config: CapacitorConfig = {<br>  appId: 'com.example.app',<br>  appName: 'example',<br>  webDir: 'out', // Ensure this matches your Next.js output directory<br>};export default config;</pre>\n<h3>Step 4: Install Platform\u00a0Plugins</h3>\n<p>Install the Capacitor platform plugins for Android and\u00a0iOS:</p>\n<pre>npm install @capacitor/android @capacitor/ios</pre>\n<h3>Step 5: Add Platforms</h3>\n<p>Add the Android and iOS platforms to your\u00a0project:</p>\n<pre>npx cap add android<br>npx cap add ios</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/402/0*uoDcnVUPZ3qq7gcD.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/399/0*Mcu8CjBmOZ_Q7mpI.jpeg\"></figure><h3>Step 6: Configure Next.js for Static\u00a0Export</h3>\n<p>Update your next.config.mjs to enable static exports and disable image optimization:</p>\n<pre>/** @type {import('next').NextConfig} */<br>const nextConfig = {<br>  reactStrictMode: true,<br>  images: {<br>    unoptimized: true,<br>  },<br>  output: 'export',<br>};<br>export default nextConfig;</pre>\n<h3>Step 7: Build and Export Your\u00a0Project</h3>\n<p>Build and export your Next.js\u00a0project:</p>\n<pre>npm run build</pre>\n<p>After a successful build, if the folder and file structure looks like this, the specific file names do not matter. It means the build was successful</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/401/0*y29fUu7u26-1WPrf.jpeg\"></figure><h3>Step 8: Sync Capacitor</h3>\n<p>Sync the Capacitor configuration and\u00a0assets:</p>\n<pre>npx cap sync</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*KDLD_biV0Vkkbs1Z.jpeg\"></figure><h3>Step 9: Open and Run the Android\u00a0Project</h3>\n<p>Open your Android project in Android\u00a0Studio:</p>\n<pre>npx cap open android</pre>\n<p>Run your app on an Android device or emulator directly from Android\u00a0Studio.</p>\n<h3>Step 10: Open and Run the iOS\u00a0Project</h3>\n<p>For macOS users, open your iOS project in\u00a0Xcode:</p>\n<pre>npx cap open ios</pre>\n<p>Run your app on an iOS device or simulator from\u00a0Xcode.</p>\n<h3>Step 11:Generate Apk</h3>\n<p>Before generate apk file you must have to create keyStore:</p>\n<pre>keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000</pre>\n<p>Enter keystore password: 123456<br>Enter key return password for\u00a0: 123456<br>What is your first and last name?<br>[Unknown]:<br>What is the name of your organizational unit?<br>[Unknown]:<br>What is the name of your organization?<br>[Unknown]:<br>What is the name of your City or Locality?<br>[Unknown]:<br>What is the name of your State or Province?<br>[Unknown]:<br>What is the two-letter country code for this unit?<br>[Unknown]:<br>Is CN=your name, OU=your organizational unit, O=your organization, L=your city, ST=your state, C=your country correct?<br>[no]:\u00a0yes</p>\n<h3>Step 12:Change the file Directory</h3>\n<p>move my-release-key.keystore file into Andriod\u00a0folder</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/251/0*h_Uy58lJUMGWhLGh.jpeg\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/254/0*p52pB0LrL6V4ZUYC.jpeg\"></figure><pre>npx cap build android --keystorepath my-release-key.keystore --keystorepass 123456 --keystorealias alias_name --keystorealiaspass 123456 --androidreleasetype APK</pre>\n<h3>Step 13:Build\u00a0Apk</h3>\n<pre>npx cap build android</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*pLG7qmvmueGkC--f.jpeg\"></figure><h3>Step 14:Build Apk Directory</h3>\n<p>android&gt;app&gt;build&gt;apk&gt;release</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/451/0*xFbBL8LpEU3UgoJZ.jpeg\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=12943bc578ff\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["javascript","progra","capacitor","nextjs","ionic"]},{"title":"10 Expert Performance Tips Every Senior JS React Developer Should Know","pubDate":"2024-06-11 07:13:22","link":"https://afzalimdad9.medium.com/10-expert-performance-tips-every-senior-js-react-developer-should-know-66ef68d604aa?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/66ef68d604aa","author":"Afzal Imdad","thumbnail":"","description":"\n<p>Elevate your React development skills with 10 advanced performance tips tailored for senior JavaScript developers. Learn how to optimize your code and enhance the efficiency of your React applications. Master the techniques that will set you apart in the competitive world of web development.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*JynmiD5qyJr9pmCS.png\"></figure><h3>1. Use useMemo for Expensive Calculations</h3>\n<p>When performing expensive calculations or data transformations, use the useMemo hook to memoize the result and prevent unnecessary re-calculations.</p>\n<pre>import React, { useMemo } from 'react';<br><br>const MyComponent = ({ data }) =&gt; {<br>  const transformedData = useMemo(() =&gt; {<br>    // Perform expensive data transformation here<br>    return data.map(item =&gt; item * 2);<br>  }, [data]);<br>  return (<br>    &lt;div&gt;<br>      {/* Use transformedData here */}<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<h3>2. Use useCallback for Memoized Functions</h3>\n<p>When passing callback functions as props, use the useCallback hook to memoize the function and prevent unnecessary re-renders of child components.</p>\n<pre>import React, { useCallback } from 'react';<br><br>const ParentComponent = () =&gt; {<br>  const handleButtonClick = useCallback(() =&gt; {<br>    // Handle button click here<br>  }, []);<br>  return (<br>    &lt;ChildComponent onClick={handleButtonClick} /&gt;<br>  );<br>};</pre>\n<h3>3. Use React.memo for Performance Optimization</h3>\n<p>To optimize functional components, use the React.memo higher-order component to memoize the component and prevent re-rendering if the props haven't\u00a0changed.</p>\n<pre>import React from 'react';<br><br>const MyComponent = React.memo(({ prop1, prop2 }) =&gt; {<br>  // Render component here<br>});</pre>\n<h3>4. Use Virtualized Lists for Efficient Rendering</h3>\n<p>For long lists, use a virtualized list library like react-window or react-virtualized to only render visible items, thus improving rendering performance.</p>\n<pre>import React from 'react';<br>import { FixedSizeList } from 'react-window';<br><br>const MyListComponent = ({ data }) =&gt; {<br>  const renderRow = ({ index, style }) =&gt; {<br>    const item = data[index];<br>    return (<br>      &lt;div style={style}&gt;{item}&lt;/div&gt;<br>    );<br>  };<br>  return (<br>    &lt;FixedSizeList<br>      height={300}<br>      width={300}<br>      itemSize={50}<br>      itemCount={data.length}<br>    &gt;<br>      {renderRow}<br>    &lt;/FixedSizeList&gt;<br>  );<br>};</pre>\n<h3>5. Use Code Splitting for Lazy\u00a0Loading</h3>\n<p>Split your code into smaller chunks and load them lazily using dynamic imports and React\u2019s lazy and Suspense components. This improves initial load time and only loads necessary code when\u00a0needed.</p>\n<pre>import React, { lazy, Suspense } from 'react';<br><br>const LazyComponent = lazy(() =&gt; import('./LazyComponent'));<br>const App = () =&gt; {<br>  return (<br>    &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;<br>      &lt;LazyComponent /&gt;<br>    &lt;/Suspense&gt;<br>  );<br>};</pre>\n<h3>6. Use Memoization for Expensive Calculations</h3>\n<p>Memoization involves caching the results of expensive function calls and returning the cached result when the same inputs occur again, saving unnecessary computations.</p>\n<pre>const memoizedExpensiveFunction = useMemo(() =&gt; {<br>  // Expensive computation here<br>}, [input]);</pre>\n<h3>7. Optimize Rendering with React.Fragment</h3>\n<p>When rendering multiple elements without a container element, use React.Fragment or the shorthand syntax &lt;&gt;...&lt;/&gt; to avoid excess DOM\u00a0nodes.</p>\n<pre>import React from 'react';<br><br>const MyComponent = () =&gt; {<br>  return (<br>    &lt;&gt;<br>      &lt;div&gt;Element 1&lt;/div&gt;<br>      &lt;div&gt;Element 2&lt;/div&gt;<br>    &lt;/&gt;<br>  );<br>};</pre>\n<h3>8. Use Function Components with\u00a0Hooks</h3>\n<p>Use function components with hooks instead of class-based components as they offer simpler and more performant code.</p>\n<pre>import React, { useState } from 'react';<br><br>const MyComponent = () =&gt; {<br>  const [count, setCount] = useState(0);<br>  const handleIncrement = () =&gt; {<br>    setCount(count + 1);<br>  };<br>  return (<br>    &lt;div&gt;<br>      &lt;button onClick={handleIncrement}&gt;Increment&lt;/button&gt;<br>      &lt;p&gt;Count: {count}&lt;/p&gt;<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<h3>9. Avoid Inline Function Definitions</h3>\n<p>Avoid defining functions inline within render methods as they create a new reference on each render, leading to unnecessary re-renders of child components.</p>\n<pre>import React, { useCallback } from 'react';<br>const ParentComponent = () =&gt; {<br>  const handleButtonClick = useCallback(() =&gt; {<br>    // Handle button click here<br>  }, []);<br>  return (<br>    &lt;ChildComponent onClick={handleButtonClick} /&gt;<br>  );<br>};</pre>\n<h3>10. Use React.PureComponent or React.memo for Performance Optimization</h3>\n<p>Use React.PureComponent or React.memo to prevent unnecessary re-rendering of components by performing shallow prop comparisons.</p>\n<pre>import React, { PureComponent } from 'react';<br>class MyComponent extends PureComponent {<br>  render() {<br>    // Render component here<br>  }<br>}<br>export default MyComponent;</pre>\n<p>These performance tips can help improve the efficiency and responsiveness of your ReactJS applications. Utilizing functional architecture, memoization, and code-splitting techniques can greatly enhance the overall performance of your React components.</p>\n<p>Don\u2019t be shy to clap, consider clap if you find this useful. If you want you can clap multiple times also\u00a0:P, just try\u00a0:D</p>\n<h3>Stackademic \ud83c\udf93</h3>\n<p>Thank you for reading until the end. Before you\u00a0go:</p>\n<ul>\n<li>Please consider <strong>clapping</strong> and <strong>following</strong> the writer!\u00a0\ud83d\udc4f</li>\n<li>Visit our other platforms: <a href=\"https://plainenglish.io/\"><strong>In Plain English</strong></a><strong> | </strong><a href=\"https://cofeed.app/\"><strong>CoFeed</strong></a><strong> | </strong><a href=\"https://venturemagazine.net/\"><strong>Venture</strong></a><strong> |\u00a0</strong><a href=\"https://blog.cubed.run/\"><strong>Cubed</strong></a>\n</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=66ef68d604aa\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Elevate your React development skills with 10 advanced performance tips tailored for senior JavaScript developers. Learn how to optimize your code and enhance the efficiency of your React applications. Master the techniques that will set you apart in the competitive world of web development.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*JynmiD5qyJr9pmCS.png\"></figure><h3>1. Use useMemo for Expensive Calculations</h3>\n<p>When performing expensive calculations or data transformations, use the useMemo hook to memoize the result and prevent unnecessary re-calculations.</p>\n<pre>import React, { useMemo } from 'react';<br><br>const MyComponent = ({ data }) =&gt; {<br>  const transformedData = useMemo(() =&gt; {<br>    // Perform expensive data transformation here<br>    return data.map(item =&gt; item * 2);<br>  }, [data]);<br>  return (<br>    &lt;div&gt;<br>      {/* Use transformedData here */}<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<h3>2. Use useCallback for Memoized Functions</h3>\n<p>When passing callback functions as props, use the useCallback hook to memoize the function and prevent unnecessary re-renders of child components.</p>\n<pre>import React, { useCallback } from 'react';<br><br>const ParentComponent = () =&gt; {<br>  const handleButtonClick = useCallback(() =&gt; {<br>    // Handle button click here<br>  }, []);<br>  return (<br>    &lt;ChildComponent onClick={handleButtonClick} /&gt;<br>  );<br>};</pre>\n<h3>3. Use React.memo for Performance Optimization</h3>\n<p>To optimize functional components, use the React.memo higher-order component to memoize the component and prevent re-rendering if the props haven't\u00a0changed.</p>\n<pre>import React from 'react';<br><br>const MyComponent = React.memo(({ prop1, prop2 }) =&gt; {<br>  // Render component here<br>});</pre>\n<h3>4. Use Virtualized Lists for Efficient Rendering</h3>\n<p>For long lists, use a virtualized list library like react-window or react-virtualized to only render visible items, thus improving rendering performance.</p>\n<pre>import React from 'react';<br>import { FixedSizeList } from 'react-window';<br><br>const MyListComponent = ({ data }) =&gt; {<br>  const renderRow = ({ index, style }) =&gt; {<br>    const item = data[index];<br>    return (<br>      &lt;div style={style}&gt;{item}&lt;/div&gt;<br>    );<br>  };<br>  return (<br>    &lt;FixedSizeList<br>      height={300}<br>      width={300}<br>      itemSize={50}<br>      itemCount={data.length}<br>    &gt;<br>      {renderRow}<br>    &lt;/FixedSizeList&gt;<br>  );<br>};</pre>\n<h3>5. Use Code Splitting for Lazy\u00a0Loading</h3>\n<p>Split your code into smaller chunks and load them lazily using dynamic imports and React\u2019s lazy and Suspense components. This improves initial load time and only loads necessary code when\u00a0needed.</p>\n<pre>import React, { lazy, Suspense } from 'react';<br><br>const LazyComponent = lazy(() =&gt; import('./LazyComponent'));<br>const App = () =&gt; {<br>  return (<br>    &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;<br>      &lt;LazyComponent /&gt;<br>    &lt;/Suspense&gt;<br>  );<br>};</pre>\n<h3>6. Use Memoization for Expensive Calculations</h3>\n<p>Memoization involves caching the results of expensive function calls and returning the cached result when the same inputs occur again, saving unnecessary computations.</p>\n<pre>const memoizedExpensiveFunction = useMemo(() =&gt; {<br>  // Expensive computation here<br>}, [input]);</pre>\n<h3>7. Optimize Rendering with React.Fragment</h3>\n<p>When rendering multiple elements without a container element, use React.Fragment or the shorthand syntax &lt;&gt;...&lt;/&gt; to avoid excess DOM\u00a0nodes.</p>\n<pre>import React from 'react';<br><br>const MyComponent = () =&gt; {<br>  return (<br>    &lt;&gt;<br>      &lt;div&gt;Element 1&lt;/div&gt;<br>      &lt;div&gt;Element 2&lt;/div&gt;<br>    &lt;/&gt;<br>  );<br>};</pre>\n<h3>8. Use Function Components with\u00a0Hooks</h3>\n<p>Use function components with hooks instead of class-based components as they offer simpler and more performant code.</p>\n<pre>import React, { useState } from 'react';<br><br>const MyComponent = () =&gt; {<br>  const [count, setCount] = useState(0);<br>  const handleIncrement = () =&gt; {<br>    setCount(count + 1);<br>  };<br>  return (<br>    &lt;div&gt;<br>      &lt;button onClick={handleIncrement}&gt;Increment&lt;/button&gt;<br>      &lt;p&gt;Count: {count}&lt;/p&gt;<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<h3>9. Avoid Inline Function Definitions</h3>\n<p>Avoid defining functions inline within render methods as they create a new reference on each render, leading to unnecessary re-renders of child components.</p>\n<pre>import React, { useCallback } from 'react';<br>const ParentComponent = () =&gt; {<br>  const handleButtonClick = useCallback(() =&gt; {<br>    // Handle button click here<br>  }, []);<br>  return (<br>    &lt;ChildComponent onClick={handleButtonClick} /&gt;<br>  );<br>};</pre>\n<h3>10. Use React.PureComponent or React.memo for Performance Optimization</h3>\n<p>Use React.PureComponent or React.memo to prevent unnecessary re-rendering of components by performing shallow prop comparisons.</p>\n<pre>import React, { PureComponent } from 'react';<br>class MyComponent extends PureComponent {<br>  render() {<br>    // Render component here<br>  }<br>}<br>export default MyComponent;</pre>\n<p>These performance tips can help improve the efficiency and responsiveness of your ReactJS applications. Utilizing functional architecture, memoization, and code-splitting techniques can greatly enhance the overall performance of your React components.</p>\n<p>Don\u2019t be shy to clap, consider clap if you find this useful. If you want you can clap multiple times also\u00a0:P, just try\u00a0:D</p>\n<h3>Stackademic \ud83c\udf93</h3>\n<p>Thank you for reading until the end. Before you\u00a0go:</p>\n<ul>\n<li>Please consider <strong>clapping</strong> and <strong>following</strong> the writer!\u00a0\ud83d\udc4f</li>\n<li>Visit our other platforms: <a href=\"https://plainenglish.io/\"><strong>In Plain English</strong></a><strong> | </strong><a href=\"https://cofeed.app/\"><strong>CoFeed</strong></a><strong> | </strong><a href=\"https://venturemagazine.net/\"><strong>Venture</strong></a><strong> |\u00a0</strong><a href=\"https://blog.cubed.run/\"><strong>Cubed</strong></a>\n</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=66ef68d604aa\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["front-end-development","javascript","web-development","react"]},{"title":"Cookie consent in NextJs","pubDate":"2024-06-10 04:28:16","link":"https://afzalimdad9.medium.com/cookie-consent-in-nextjs-4ba144c5cc60?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/4ba144c5cc60","author":"Afzal Imdad","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/1*J4-IR-eRdVtLz3_8pR2nag.png\"></figure><p>This article discusses how to add cookie consent to a NextJs app using cookies-next package.</p>\n<h3>Install the required packages:</h3>\n<p>To install the package, type one of the following commands based on your package\u00a0manager</p>\n<p>For npm:</p>\n<pre>npm install cookies-next</pre>\n<p>For yarn:</p>\n<pre>yarn add cookies-next</pre>\n<h3>Cookie consent implementation:</h3>\n<p>When there is no cookie present, the cookie consent popup should be\u00a0shown.</p>\n<p>cookies-next package has hasCookie, setCookie functions with which the cookies can be accessed and managed. Here is how its managed in a React component.</p>\n<pre>const [showConsent, setShowConsent] = React.useState(true);<br>React.useEffect(() =&gt; {<br>  setShowConsent(hasCookie(\"localConsent\"));<br>}, []);<br>const acceptCookie = () =&gt; {<br>  setShowConsent(true);<br>  setCookie(\"localConsent\", \"true\", {});<br>};</pre>\n<p>Here is a full example of how a cookie consent component works in Next.js. Add the component to your pages/index.js to be\u00a0visible.</p>\n<pre>import React from \"react\";<br>import { hasCookie, setCookie } from \"cookies-next\";<br><br>const CookieConsent = (props) =&gt; {<br>  const [showConsent, setShowConsent] = React.useState(true);<br><br>  React.useEffect(() =&gt; {<br>    setShowConsent(hasCookie(\"localConsent\"));<br>  }, []);<br><br>  const acceptCookie = () =&gt; {<br>    setShowConsent(true);<br>    setCookie(\"localConsent\", \"true\", {});<br>  };<br><br>  if (showConsent) {<br>    return null;<br>  }<br><br>  return (<br>    &lt;div className=\"fixed inset-0 bg-slate-700 bg-opacity-70\"&gt;<br>      &lt;div className=\"fixed bottom-0 left-0 right-0 flex items-center justify-between px-4 py-8 bg-gray-100\"&gt;<br>        &lt;span className=\"text-dark text-base mr-16\"&gt;<br>          This website uses cookies to improve user experience. By using our website you consent to all cookies in accordance with our Cookie Policy.<br>        &lt;/span&gt;<br>        &lt;button className=\"bg-green-500 py-2 px-8 rounded text-white\" onClick={() =&gt; acceptCookie()}&gt;<br>          Accept<br>        &lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  );<br>};<br><br>export default CookieConsent;</pre>\n<blockquote>\n<strong><em>Note:</em></strong><em> The above example uses tailwindcss. To know more, </em><a href=\"https://tailwindcss.com/docs/guides/nextjs\"><em>refer\u00a0here</em></a>\n</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*SfjKAd4KfN9_jGzZ.png\"><figcaption>Output</figcaption></figure><h3>Be Amazed!</h3>\n<p>Hooray! We have successfully added cookie consent in\u00a0Next.js.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4ba144c5cc60\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/1*J4-IR-eRdVtLz3_8pR2nag.png\"></figure><p>This article discusses how to add cookie consent to a NextJs app using cookies-next package.</p>\n<h3>Install the required packages:</h3>\n<p>To install the package, type one of the following commands based on your package\u00a0manager</p>\n<p>For npm:</p>\n<pre>npm install cookies-next</pre>\n<p>For yarn:</p>\n<pre>yarn add cookies-next</pre>\n<h3>Cookie consent implementation:</h3>\n<p>When there is no cookie present, the cookie consent popup should be\u00a0shown.</p>\n<p>cookies-next package has hasCookie, setCookie functions with which the cookies can be accessed and managed. Here is how its managed in a React component.</p>\n<pre>const [showConsent, setShowConsent] = React.useState(true);<br>React.useEffect(() =&gt; {<br>  setShowConsent(hasCookie(\"localConsent\"));<br>}, []);<br>const acceptCookie = () =&gt; {<br>  setShowConsent(true);<br>  setCookie(\"localConsent\", \"true\", {});<br>};</pre>\n<p>Here is a full example of how a cookie consent component works in Next.js. Add the component to your pages/index.js to be\u00a0visible.</p>\n<pre>import React from \"react\";<br>import { hasCookie, setCookie } from \"cookies-next\";<br><br>const CookieConsent = (props) =&gt; {<br>  const [showConsent, setShowConsent] = React.useState(true);<br><br>  React.useEffect(() =&gt; {<br>    setShowConsent(hasCookie(\"localConsent\"));<br>  }, []);<br><br>  const acceptCookie = () =&gt; {<br>    setShowConsent(true);<br>    setCookie(\"localConsent\", \"true\", {});<br>  };<br><br>  if (showConsent) {<br>    return null;<br>  }<br><br>  return (<br>    &lt;div className=\"fixed inset-0 bg-slate-700 bg-opacity-70\"&gt;<br>      &lt;div className=\"fixed bottom-0 left-0 right-0 flex items-center justify-between px-4 py-8 bg-gray-100\"&gt;<br>        &lt;span className=\"text-dark text-base mr-16\"&gt;<br>          This website uses cookies to improve user experience. By using our website you consent to all cookies in accordance with our Cookie Policy.<br>        &lt;/span&gt;<br>        &lt;button className=\"bg-green-500 py-2 px-8 rounded text-white\" onClick={() =&gt; acceptCookie()}&gt;<br>          Accept<br>        &lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  );<br>};<br><br>export default CookieConsent;</pre>\n<blockquote>\n<strong><em>Note:</em></strong><em> The above example uses tailwindcss. To know more, </em><a href=\"https://tailwindcss.com/docs/guides/nextjs\"><em>refer\u00a0here</em></a>\n</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*SfjKAd4KfN9_jGzZ.png\"><figcaption>Output</figcaption></figure><h3>Be Amazed!</h3>\n<p>Hooray! We have successfully added cookie consent in\u00a0Next.js.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4ba144c5cc60\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["nextjs","typescript","javascript","cookie-consent","react"]},{"title":"Stop Using TypeScript Interfaces","pubDate":"2024-06-09 07:31:08","link":"https://afzalimdad9.medium.com/stop-using-typescript-interfaces-f73f6da2b047?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/f73f6da2b047","author":"Afzal Imdad","thumbnail":"","description":"\n<h3>Why You Should Use Types\u00a0Instead</h3>\n<figure><img alt=\"This image has been generated by AI.\" src=\"https://cdn-images-1.medium.com/max/720/1*g-jmQncPSapQsOWjRZBO0Q.png\"></figure><blockquote>\n<em>Join our </em><a href=\"https://discord.com/invite/C2PXBMqpuV\"><em>Vibrant Discord Community</em></a><em> for exclusive information and insightful discussions</em>\n</blockquote>\n<p><strong>Types and Interfaces</strong> are profound features used inside every TypeScript program.</p>\n<p>However, since types and interfaces are quite similar in function, it begs the question: <strong><em>Which is\u00a0better?</em></strong></p>\n<p>Today, we will evaluate types and interfaces, then reach a conclusion as to why <strong><em>you</em></strong> should use types over interfaces in most scenarios.</p>\n<p><strong>So without further ado\u2026 Lets dive right\u00a0in.</strong></p>\n<h3>So What Are The Differences?</h3>\n<p>Let\u2019s analyze this Person <strong>type </strong>and <strong>interface </strong>definition:</p>\n<pre>type Person = {<br>  name: string<br>  age: number<br>}<br>interface Person {<br>  name: string<br>  age: number<br>}</pre>\n<p>It is clear types and interfaces have similar syntax, with the key difference being that the type uses = to define the shape of an object unlike the interface.</p>\n<p>However, there is much more to it than\u00a0this.</p>\n<p>Let\u2019s dig deeper to explore and evaluate types and interfaces together.</p>\n<h3>Extensibility</h3>\n<p>In terms of extensibility, many argue interfaces are obvious winners since interfaces may extend other interfaces using\u00a0extends.</p>\n<pre>// Extensibility Example<br>interface Person extends Job {<br>  name: string<br>  age: number<br>}<br>interface Job {<br>  job: string<br>}<br>// Properties of Person &amp; Job used.<br>const person: Person = {<br>  name: \"John\",<br>  age: 25,<br>  job: \"Full-Stack Web Developer\",<br>}</pre>\n<p>Here the Person interface extends Job, and as a result the properties of the Job interface merge into\u00a0Person.</p>\n<p>On the other hand, types also offer extensibility by leveraging the <strong>union </strong>| or <strong>intersection </strong>&amp; operators to merge existing\u00a0types.</p>\n<p><strong>Interfaces cannot express this behavior directly.</strong></p>\n<pre>// \u2705 Works <br>type Person = {<br>  name: string<br>  age: number<br>} &amp; { job: string }<br>// \u274c Does not work <br>interface Person {<br>  name: string<br>  age: number<br>} &amp; { job: string }</pre>\n<h3>Implementation</h3>\n<p>Interfaces in TypeScript are compatible with Object Oriented Programming (OOP) like in other languages, e.g. <strong>Java</strong> or\u00a0<strong>C#</strong>.</p>\n<p>This means interfaces can be implemented in classes using implements.</p>\n<p>Let\u2019s now define Person as a class, and implement a new interface called Work and satisfy the contract between\u00a0them.</p>\n<pre>// Implementation Example<br>interface Work {<br>  doWork: () =&gt; void<br>}<br>class Person implements Work {<br>  name: string<br>  age: number<br>  constructor(name: string, age: number) {<br>    this.name = name<br>    this.age = age<br>  }<br>  // doWork method implemented to satisfy the `Work` interface.<br>  doWork() {<br>    console.log(\"Working...\")<br>  }<br>}<br>const person = new Person(\"John\", 25)<br>person.doWork()</pre>\n<p>Therefore if you use OOP frequently, interfaces will be more applicable than types, as types cannot be directly implemented by\u00a0classes.</p>\n<h3>Performance</h3>\n<p>When it comes to performance, we are talking about the performance of <strong>\u201ctype-checking\u201d </strong>done by the TypeScript compiler, which decreases exponentially as your codebase increases in\u00a0size.</p>\n<p>This is why we benchmark which of types or interfaces are superior in terms of type-checking performance.</p>\n<p>Here is a video where <a href=\"https://www.mattpocock.com/\"><strong>Matt Pocock</strong></a> explains the differences between types and interfaces, and why there is actually <strong>ZERO</strong> difference in type-checking performance between types and interfaces.</p>\n<p>Types vs Interfaces: 0 Performance Difference</p>\n<h3>Why Interfaces Could be\u00a0Harmful</h3>\n<p>Interfaces in TypeScript have a unique feature called <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-merging.html\"><strong>Declaration Merging</strong></a>.</p>\n<p>Declaration merging is when the TypeScript compiler merges <strong>two or more </strong>interfaces with identical names into\u00a0<strong>one</strong>.</p>\n<pre>// Initial Person Interface<br>interface Person {<br>  name: string<br>  age: number<br>}<br>// Refining the Person interface using \"Declaration Merging\"<br>interface Person {<br>  gender: string<br>}<br>// Using the \"Merged\" interface to define a new \"person\"<br>const person: Person = { name: \"John\", age: 25, gender: \"Male\" }</pre>\n<p>On the one hand, this feature allows for convenient refinement and extension of existing interfaces without changing other dependencies.</p>\n<p>Here is an example of me re-declaring the @auth/core/types module and refining the Session interface.</p>\n<p>Refining the @auth/core interface</p>\n<p>This is an example of <strong>declaration merging</strong> because<strong> </strong>I refine the original interface with a new id: string attribute.</p>\n<p>This is a <strong>justifiable</strong> use case for interfaces because it allows developers to extend library interfaces with\u00a0ease.</p>\n<p><strong>Types do not permit this since they are immutable after creation.</strong></p>\n<p>On the other hand, declaration merging can have detrimental and surprising effects on your codebase for these <strong>two </strong>main\u00a0reasons:</p>\n<ol>\n<li>\n<strong>Order of Precedence</strong>: Later declarations always take precedence of prior ones. If not careful, this could lead to unexpected issues when declaration merging occurs in many parts of your\u00a0program.</li>\n<li>\n<strong>Unsafe Merging with Classes</strong>: Since the TypeScript compiler doesn\u2019t check for property initialization, this could lead to unexpected runtime\u00a0errors.</li>\n</ol>\n<p>Types do not have this problem, and hence are more straightforward and <strong>safe</strong> to use as a\u00a0result.</p>\n<h3>Conclusion</h3>\n<p>Unless specific interface behaviour is necessary, e.g. extensible refinement or implementation using OOP, your best bet is to stick with\u00a0<strong>types</strong>.</p>\n<p>Types are flexible, straightforward, and avoid pitfalls associated with <strong>declaration merging</strong>.</p>\n<p>Types are also identical in performance compared to interfaces, providing <strong><em>you</em></strong> another reason to select types over interfaces in your codebase.</p>\n<blockquote>\n<em>If you enjoyed this article, please make sure to </em><a href=\"https://medium.com/@danielcracbusiness/subscribe\"><em>Subscribe</em></a><em>, Clap, Comment and </em><a href=\"https://linktr.ee/dcraciun?subscribe=\"><em>Connect with me</em></a><em> today!\u00a0\ud83c\udf10</em>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f73f6da2b047\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Why You Should Use Types\u00a0Instead</h3>\n<figure><img alt=\"This image has been generated by AI.\" src=\"https://cdn-images-1.medium.com/max/720/1*g-jmQncPSapQsOWjRZBO0Q.png\"></figure><blockquote>\n<em>Join our </em><a href=\"https://discord.com/invite/C2PXBMqpuV\"><em>Vibrant Discord Community</em></a><em> for exclusive information and insightful discussions</em>\n</blockquote>\n<p><strong>Types and Interfaces</strong> are profound features used inside every TypeScript program.</p>\n<p>However, since types and interfaces are quite similar in function, it begs the question: <strong><em>Which is\u00a0better?</em></strong></p>\n<p>Today, we will evaluate types and interfaces, then reach a conclusion as to why <strong><em>you</em></strong> should use types over interfaces in most scenarios.</p>\n<p><strong>So without further ado\u2026 Lets dive right\u00a0in.</strong></p>\n<h3>So What Are The Differences?</h3>\n<p>Let\u2019s analyze this Person <strong>type </strong>and <strong>interface </strong>definition:</p>\n<pre>type Person = {<br>  name: string<br>  age: number<br>}<br>interface Person {<br>  name: string<br>  age: number<br>}</pre>\n<p>It is clear types and interfaces have similar syntax, with the key difference being that the type uses = to define the shape of an object unlike the interface.</p>\n<p>However, there is much more to it than\u00a0this.</p>\n<p>Let\u2019s dig deeper to explore and evaluate types and interfaces together.</p>\n<h3>Extensibility</h3>\n<p>In terms of extensibility, many argue interfaces are obvious winners since interfaces may extend other interfaces using\u00a0extends.</p>\n<pre>// Extensibility Example<br>interface Person extends Job {<br>  name: string<br>  age: number<br>}<br>interface Job {<br>  job: string<br>}<br>// Properties of Person &amp; Job used.<br>const person: Person = {<br>  name: \"John\",<br>  age: 25,<br>  job: \"Full-Stack Web Developer\",<br>}</pre>\n<p>Here the Person interface extends Job, and as a result the properties of the Job interface merge into\u00a0Person.</p>\n<p>On the other hand, types also offer extensibility by leveraging the <strong>union </strong>| or <strong>intersection </strong>&amp; operators to merge existing\u00a0types.</p>\n<p><strong>Interfaces cannot express this behavior directly.</strong></p>\n<pre>// \u2705 Works <br>type Person = {<br>  name: string<br>  age: number<br>} &amp; { job: string }<br>// \u274c Does not work <br>interface Person {<br>  name: string<br>  age: number<br>} &amp; { job: string }</pre>\n<h3>Implementation</h3>\n<p>Interfaces in TypeScript are compatible with Object Oriented Programming (OOP) like in other languages, e.g. <strong>Java</strong> or\u00a0<strong>C#</strong>.</p>\n<p>This means interfaces can be implemented in classes using implements.</p>\n<p>Let\u2019s now define Person as a class, and implement a new interface called Work and satisfy the contract between\u00a0them.</p>\n<pre>// Implementation Example<br>interface Work {<br>  doWork: () =&gt; void<br>}<br>class Person implements Work {<br>  name: string<br>  age: number<br>  constructor(name: string, age: number) {<br>    this.name = name<br>    this.age = age<br>  }<br>  // doWork method implemented to satisfy the `Work` interface.<br>  doWork() {<br>    console.log(\"Working...\")<br>  }<br>}<br>const person = new Person(\"John\", 25)<br>person.doWork()</pre>\n<p>Therefore if you use OOP frequently, interfaces will be more applicable than types, as types cannot be directly implemented by\u00a0classes.</p>\n<h3>Performance</h3>\n<p>When it comes to performance, we are talking about the performance of <strong>\u201ctype-checking\u201d </strong>done by the TypeScript compiler, which decreases exponentially as your codebase increases in\u00a0size.</p>\n<p>This is why we benchmark which of types or interfaces are superior in terms of type-checking performance.</p>\n<p>Here is a video where <a href=\"https://www.mattpocock.com/\"><strong>Matt Pocock</strong></a> explains the differences between types and interfaces, and why there is actually <strong>ZERO</strong> difference in type-checking performance between types and interfaces.</p>\n<p>Types vs Interfaces: 0 Performance Difference</p>\n<h3>Why Interfaces Could be\u00a0Harmful</h3>\n<p>Interfaces in TypeScript have a unique feature called <a href=\"https://www.typescriptlang.org/docs/handbook/declaration-merging.html\"><strong>Declaration Merging</strong></a>.</p>\n<p>Declaration merging is when the TypeScript compiler merges <strong>two or more </strong>interfaces with identical names into\u00a0<strong>one</strong>.</p>\n<pre>// Initial Person Interface<br>interface Person {<br>  name: string<br>  age: number<br>}<br>// Refining the Person interface using \"Declaration Merging\"<br>interface Person {<br>  gender: string<br>}<br>// Using the \"Merged\" interface to define a new \"person\"<br>const person: Person = { name: \"John\", age: 25, gender: \"Male\" }</pre>\n<p>On the one hand, this feature allows for convenient refinement and extension of existing interfaces without changing other dependencies.</p>\n<p>Here is an example of me re-declaring the @auth/core/types module and refining the Session interface.</p>\n<p>Refining the @auth/core interface</p>\n<p>This is an example of <strong>declaration merging</strong> because<strong> </strong>I refine the original interface with a new id: string attribute.</p>\n<p>This is a <strong>justifiable</strong> use case for interfaces because it allows developers to extend library interfaces with\u00a0ease.</p>\n<p><strong>Types do not permit this since they are immutable after creation.</strong></p>\n<p>On the other hand, declaration merging can have detrimental and surprising effects on your codebase for these <strong>two </strong>main\u00a0reasons:</p>\n<ol>\n<li>\n<strong>Order of Precedence</strong>: Later declarations always take precedence of prior ones. If not careful, this could lead to unexpected issues when declaration merging occurs in many parts of your\u00a0program.</li>\n<li>\n<strong>Unsafe Merging with Classes</strong>: Since the TypeScript compiler doesn\u2019t check for property initialization, this could lead to unexpected runtime\u00a0errors.</li>\n</ol>\n<p>Types do not have this problem, and hence are more straightforward and <strong>safe</strong> to use as a\u00a0result.</p>\n<h3>Conclusion</h3>\n<p>Unless specific interface behaviour is necessary, e.g. extensible refinement or implementation using OOP, your best bet is to stick with\u00a0<strong>types</strong>.</p>\n<p>Types are flexible, straightforward, and avoid pitfalls associated with <strong>declaration merging</strong>.</p>\n<p>Types are also identical in performance compared to interfaces, providing <strong><em>you</em></strong> another reason to select types over interfaces in your codebase.</p>\n<blockquote>\n<em>If you enjoyed this article, please make sure to </em><a href=\"https://medium.com/@danielcracbusiness/subscribe\"><em>Subscribe</em></a><em>, Clap, Comment and </em><a href=\"https://linktr.ee/dcraciun?subscribe=\"><em>Connect with me</em></a><em> today!\u00a0\ud83c\udf10</em>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f73f6da2b047\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["software-engineering","programming","typescript","web-development","javascript"]},{"title":"CSS Art: June","pubDate":"2024-06-08 04:56:22","link":"https://afzalimdad9.medium.com/css-art-june-169ace9604de?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/169ace9604de","author":"Afzal Imdad","thumbnail":"","description":"\n<p><em>This is a submission for </em><a href=\"https://dev.to/challenges/frontend-2024-05-29\"><em>Frontend Challenge v24.04.17</em></a><em>, CSS Art:\u00a0June</em>.</p>\n<h3>Inspiration</h3>\n<p>For this CSS Art project themed around June, I focused on representing the vibrant and sunny aspects of the month, particularly the summer solstice. June is often associated with clear blue skies, warm sunshine, and blooming nature. This piece aims to capture the essence of summer with a bright, cheerful\u00a0scene.</p>\n<h3>Demo</h3>\n<p>You can view the live demo and edit the code on\u00a0<a href=\"https://codepen.io/afzalimdad9/pen/ExzvgrM\">Codepen</a></p>\n<pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=\"en\"&gt;<br>&lt;head&gt;<br>&lt;meta charset=\"UTF-8\"&gt;<br>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;<br>&lt;title&gt;CSS Art - June&lt;/title&gt;<br>&lt;style&gt;<br> body {<br> margin: 0;<br> height: 100vh;<br> display: flex;<br> justify-content: center;<br> align-items: center;<br> background: linear-gradient(to top, #87CEEB, #ffffff);<br> }<br> .scene {<br> position: relative;<br> width: 300px;<br> height: 300px;<br> }<br> .sun {<br> position: absolute;<br> top: 20px;<br> left: 50%;<br> transform: translateX(-50%);<br> width: 100px;<br> height: 100px;<br> background: radial-gradient(circle, #FFD700, #FFA500);<br> border-radius: 50%;<br> }<br> .grass {<br> position: absolute;<br> bottom: 0;<br> width: 100%;<br> height: 100px;<br> background: linear-gradient(to top, #32CD32, #7CFC00);<br> border-top-left-radius: 50%;<br> border-top-right-radius: 50%;<br> }<br> .flower {<br> position: absolute;<br> width: 20px;<br> height: 20px;<br> background: pink;<br> border-radius: 50%;<br> box-shadow: 0 0 0 10px white, 0 0 0 20px pink;<br> }<br> .flower:nth-child(2) {<br> top: 220px;<br> left: 50px;<br> }<br> .flower:nth-child(3) {<br> top: 200px;<br> left: 150px;<br> }<br> .flower:nth-child(4) {<br> top: 230px;<br> left: 250px;<br> }<br> .butterfly {<br> position: absolute;<br> width: 20px;<br> height: 20px;<br> background: orange;<br> border-radius: 50%;<br> box-shadow: 10px 10px 0 orange, -10px 10px 0 orange;<br> }<br> .butterfly:nth-child(5) {<br> top: 50px;<br> left: 100px;<br> }<br> .butterfly:nth-child(6) {<br> top: 80px;<br> left: 200px;<br> }<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br> &lt;div class=\"scene\"&gt;<br> &lt;div class=\"sun\"&gt;&lt;/div&gt;<br> &lt;div class=\"grass\"&gt;&lt;/div&gt;<br> &lt;div class=\"flower\"&gt;&lt;/div&gt;<br> &lt;div class=\"flower\"&gt;&lt;/div&gt;<br> &lt;div class=\"flower\"&gt;&lt;/div&gt;<br> &lt;div class=\"butterfly\"&gt;&lt;/div&gt;<br> &lt;div class=\"butterfly\"&gt;&lt;/div&gt;<br> &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre>\n<h3>Journey</h3>\n<p>The process of creating this CSS Art was a delightful experience. I started by brainstorming the key elements that symbolize June: the sun, clear skies, green grass, flowers, and butterflies. Using pure CSS, I experimented with gradients, positioning, and box shadows to bring these elements to\u00a0life.</p>\n<h3>Key Learnings:</h3>\n<p>Gradients and Positioning: Learned to effectively use gradients for the background and different elements.<br>Box Shadows: Used box shadows creatively to simulate petals and butterfly wings.</p>\n<p>Positioning: Improved my understanding of absolute positioning for placing elements precisely.</p>\n<h3>What I\u2019m Proud\u00a0Of:</h3>\n<p>I am particularly proud of how the sun and the overall scene came together, creating a warm and inviting representation of June. The butterflies add a dynamic touch, making the scene feel more\u00a0alive.</p>\n<h3>Future Improvements:</h3>\n<p>I hope to further refine my skills by adding more complex animations and interactivity to future CSS Art projects, such as making the butterflies flutter or adding a gentle sway to the\u00a0flowers.</p>\n<p>Thank you for considering my submission!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=169ace9604de\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p><em>This is a submission for </em><a href=\"https://dev.to/challenges/frontend-2024-05-29\"><em>Frontend Challenge v24.04.17</em></a><em>, CSS Art:\u00a0June</em>.</p>\n<h3>Inspiration</h3>\n<p>For this CSS Art project themed around June, I focused on representing the vibrant and sunny aspects of the month, particularly the summer solstice. June is often associated with clear blue skies, warm sunshine, and blooming nature. This piece aims to capture the essence of summer with a bright, cheerful\u00a0scene.</p>\n<h3>Demo</h3>\n<p>You can view the live demo and edit the code on\u00a0<a href=\"https://codepen.io/afzalimdad9/pen/ExzvgrM\">Codepen</a></p>\n<pre>&lt;!DOCTYPE html&gt;<br>&lt;html lang=\"en\"&gt;<br>&lt;head&gt;<br>&lt;meta charset=\"UTF-8\"&gt;<br>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;<br>&lt;title&gt;CSS Art - June&lt;/title&gt;<br>&lt;style&gt;<br> body {<br> margin: 0;<br> height: 100vh;<br> display: flex;<br> justify-content: center;<br> align-items: center;<br> background: linear-gradient(to top, #87CEEB, #ffffff);<br> }<br> .scene {<br> position: relative;<br> width: 300px;<br> height: 300px;<br> }<br> .sun {<br> position: absolute;<br> top: 20px;<br> left: 50%;<br> transform: translateX(-50%);<br> width: 100px;<br> height: 100px;<br> background: radial-gradient(circle, #FFD700, #FFA500);<br> border-radius: 50%;<br> }<br> .grass {<br> position: absolute;<br> bottom: 0;<br> width: 100%;<br> height: 100px;<br> background: linear-gradient(to top, #32CD32, #7CFC00);<br> border-top-left-radius: 50%;<br> border-top-right-radius: 50%;<br> }<br> .flower {<br> position: absolute;<br> width: 20px;<br> height: 20px;<br> background: pink;<br> border-radius: 50%;<br> box-shadow: 0 0 0 10px white, 0 0 0 20px pink;<br> }<br> .flower:nth-child(2) {<br> top: 220px;<br> left: 50px;<br> }<br> .flower:nth-child(3) {<br> top: 200px;<br> left: 150px;<br> }<br> .flower:nth-child(4) {<br> top: 230px;<br> left: 250px;<br> }<br> .butterfly {<br> position: absolute;<br> width: 20px;<br> height: 20px;<br> background: orange;<br> border-radius: 50%;<br> box-shadow: 10px 10px 0 orange, -10px 10px 0 orange;<br> }<br> .butterfly:nth-child(5) {<br> top: 50px;<br> left: 100px;<br> }<br> .butterfly:nth-child(6) {<br> top: 80px;<br> left: 200px;<br> }<br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br> &lt;div class=\"scene\"&gt;<br> &lt;div class=\"sun\"&gt;&lt;/div&gt;<br> &lt;div class=\"grass\"&gt;&lt;/div&gt;<br> &lt;div class=\"flower\"&gt;&lt;/div&gt;<br> &lt;div class=\"flower\"&gt;&lt;/div&gt;<br> &lt;div class=\"flower\"&gt;&lt;/div&gt;<br> &lt;div class=\"butterfly\"&gt;&lt;/div&gt;<br> &lt;div class=\"butterfly\"&gt;&lt;/div&gt;<br> &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</pre>\n<h3>Journey</h3>\n<p>The process of creating this CSS Art was a delightful experience. I started by brainstorming the key elements that symbolize June: the sun, clear skies, green grass, flowers, and butterflies. Using pure CSS, I experimented with gradients, positioning, and box shadows to bring these elements to\u00a0life.</p>\n<h3>Key Learnings:</h3>\n<p>Gradients and Positioning: Learned to effectively use gradients for the background and different elements.<br>Box Shadows: Used box shadows creatively to simulate petals and butterfly wings.</p>\n<p>Positioning: Improved my understanding of absolute positioning for placing elements precisely.</p>\n<h3>What I\u2019m Proud\u00a0Of:</h3>\n<p>I am particularly proud of how the sun and the overall scene came together, creating a warm and inviting representation of June. The butterflies add a dynamic touch, making the scene feel more\u00a0alive.</p>\n<h3>Future Improvements:</h3>\n<p>I hope to further refine my skills by adding more complex animations and interactivity to future CSS Art projects, such as making the butterflies flutter or adding a gentle sway to the\u00a0flowers.</p>\n<p>Thank you for considering my submission!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=169ace9604de\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["challenge","web-dev-challenge","css"]},{"title":"5 Tips and Tricks To Make Your Life With Next.js 14 Easier","pubDate":"2024-06-07 06:04:01","link":"https://afzalimdad9.medium.com/5-tips-and-tricks-to-make-your-life-with-next-js-14-easier-298d4ac495f5?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/298d4ac495f5","author":"Afzal Imdad","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*getUBYAwZQz_t-0g\"></figure><p>Next.js 14 is a powerful React framework that simplifies the process of building server-rendered React applications. However, with its advanced features and conventions, there can be some confusion and ambiguity for developers, especially those new to the framework. In this blog post, we\u2019ll explore five tips and tricks to help make your life with Next.js 14\u00a0easier.</p>\n<h3>Tip 1: Working with Next.js\u00a0Images</h3>\n<p>One area of confusion is the handling of images in Next.js. The process differs depending on whether you\u2019re working with local or remote\u00a0images.</p>\n<h3>Local Images</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*COxbn_xUmw1SF-OB\"></figure><p>For local images, you don\u2019t need to specify a width and height. Next.js will automatically identify the dimensions. Simply import the image and render it using the `<strong>next/image</strong>` component.</p>\n<pre>import Image from \"next/image\";<br>import localImage from \"public/hoy.png\";<br>export default function MyComponent() {<br>  return &lt;Image src={localImage} alt=\"Local Image\" /&gt;;<br>}</pre>\n<h3>Remote Images</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*-wURlkGiNnUAXgRD\"></figure><p>For remote images, you need to provide a blur placeholder and specify the width and height to prevent layout shifts. You can use the `<strong>placeholder=\u201dblur\u201d</strong>` prop to show a blurred version of the image until the full image\u00a0loads.</p>\n<p>To generate the blur data URL for remote images, you can use the `<strong>sharp</strong>` and `<strong>placeholder</strong>` packages:</p>\n<pre>import Image from \"next/image\";<br>import getBase64 from \"./utils/getBase64\";<br>export default async function MyComponent() {<br>  const blurDataUrl = await getBase64(remoteImageUrl);<br>  return (<br>    &lt;Image<br>      src={remoteImageUrl}<br>      width={600}<br>      height={600}<br>      alt=\"Remote Image\"<br>      placeholder=\"blur\"<br>      blurDataURL={blurDataUrl}<br>    /&gt;<br>  );<br>}</pre>\n<p>The `<strong>getBase64</strong>` utility function fetches the remote image, converts it to an ArrayBuffer, and then generates the base64 representation using the `<strong>placeholder</strong>` package.</p>\n<h3>Tip 2: Handling Environment Variables</h3>\n<p>Be careful when marking environment variables with `<strong>next.config.env.NEXT_PUBLIC_*</strong>` as these variables will be exposed in the browser and included in the JavaScript bundle. If you have sensitive API keys or secrets, make sure not to prefix them with `<strong>NEXT_PUBLIC_</strong>`, then they will only be available in a Node.js environment.</p>\n<h3>Tip 3: Understanding Caching in\u00a0Next.js</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*XAlTrLM3TOQwELA4\"></figure><p>Next.js caching behavior differs between development and production environments. In development mode, pages are rendered dynamically on every request by default. However, in production mode, Next.js attempts to render pages statically.</p>\n<p>To control caching in production, you can use the `<strong>revalidate</strong>` option or mark a page as `<strong>dynamic</strong>` explicitly.</p>\n<pre>// Revalidate every 5 seconds<br>export const revalidate = 5<br>// Force dynamic rendering<br>export const dynamic = 'force-dynamic'</pre>\n<h3>Tip 4: Fetching Data in Server Components</h3>\n<p>Avoid using API route handlers solely to fetch data for your server components. Instead, fetch the data directly within the server component. This approach allows Next.js to optimize the caching and reuse of data across multiple server components.</p>\n<p>If you need to reuse the same fetch logic across multiple components, consider creating a server action in the `<strong>server/</strong>` directory.</p>\n<pre>export async function getJoke() {<br>  const res = await fetch(\"https://api.example.com/joke\");<br>  const data = await res.json();<br>  if (res.ok) {<br>    return { success: true, joke: data.joke };<br>  } else {<br>    return { error: data.error };<br>  }<br>}<br>// app/page.jsx<br>import { getJoke } from \"../server/actions\";<br>export default async function Page() {<br>  const { success, joke, error } = await getJoke();<br>  if (success) {<br>    return &lt;div&gt;{joke}&lt;/div&gt;;<br>  } else {<br>    throw new Error(error);<br>  }<br>}</pre>\n<h3>Tip 5: Understanding Client and Server Components</h3>\n<p>By default, pages in Next.js are server components. You can render client components within server components to add interactivity.</p>\n<pre>\"use client\";<br>import { useState } from \"react\";<br>export default function ClientComponent() {<br>  const [count, setCount] = useState(0);<br>  return (<br>    &lt;div&gt;<br>      &lt;p&gt;Count: {count}&lt;/p&gt;<br>      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>}</pre>\n<p>Child components rendered within a client component automatically become client components as well, without the need for the `<strong>\u2019use client\u2019</strong>` directive.</p>\n<p>When working with providers (e.g., a theming provider), wrap the children with the provider in your layout, and the children will still be rendered as server components.</p>\n<pre>// app/layout.jsx<br>import { ThemeProvider } from \"your-theme-library\";<br>export default function RootLayout({ children }) {<br>  return &lt;ThemeProvider&gt;{children}&lt;/ThemeProvider&gt;;<br>}</pre>\n<h3>Conclusion</h3>\n<p>Next.js 14 is a powerful and feature-rich framework that streamlines the development of server-rendered React applications. While it introduces some new concepts and conventions, following the tips and tricks outlined in this blog post should help you navigate through the potential areas of confusion and ambiguity.</p>\n<p>By understanding how to work with images, handle environment variables, manage caching, fetch data in server components, and differentiate between client and server components, you\u2019ll be better equipped to build robust and efficient applications with Next.js\u00a014.</p>\n<p>Remember, practice and experience are key to mastering any new technology. Don\u2019t hesitate to explore the Next.js documentation, join the community forums, and experiment with the framework\u2019s features to solidify your understanding further.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=298d4ac495f5\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*getUBYAwZQz_t-0g\"></figure><p>Next.js 14 is a powerful React framework that simplifies the process of building server-rendered React applications. However, with its advanced features and conventions, there can be some confusion and ambiguity for developers, especially those new to the framework. In this blog post, we\u2019ll explore five tips and tricks to help make your life with Next.js 14\u00a0easier.</p>\n<h3>Tip 1: Working with Next.js\u00a0Images</h3>\n<p>One area of confusion is the handling of images in Next.js. The process differs depending on whether you\u2019re working with local or remote\u00a0images.</p>\n<h3>Local Images</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*COxbn_xUmw1SF-OB\"></figure><p>For local images, you don\u2019t need to specify a width and height. Next.js will automatically identify the dimensions. Simply import the image and render it using the `<strong>next/image</strong>` component.</p>\n<pre>import Image from \"next/image\";<br>import localImage from \"public/hoy.png\";<br>export default function MyComponent() {<br>  return &lt;Image src={localImage} alt=\"Local Image\" /&gt;;<br>}</pre>\n<h3>Remote Images</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*-wURlkGiNnUAXgRD\"></figure><p>For remote images, you need to provide a blur placeholder and specify the width and height to prevent layout shifts. You can use the `<strong>placeholder=\u201dblur\u201d</strong>` prop to show a blurred version of the image until the full image\u00a0loads.</p>\n<p>To generate the blur data URL for remote images, you can use the `<strong>sharp</strong>` and `<strong>placeholder</strong>` packages:</p>\n<pre>import Image from \"next/image\";<br>import getBase64 from \"./utils/getBase64\";<br>export default async function MyComponent() {<br>  const blurDataUrl = await getBase64(remoteImageUrl);<br>  return (<br>    &lt;Image<br>      src={remoteImageUrl}<br>      width={600}<br>      height={600}<br>      alt=\"Remote Image\"<br>      placeholder=\"blur\"<br>      blurDataURL={blurDataUrl}<br>    /&gt;<br>  );<br>}</pre>\n<p>The `<strong>getBase64</strong>` utility function fetches the remote image, converts it to an ArrayBuffer, and then generates the base64 representation using the `<strong>placeholder</strong>` package.</p>\n<h3>Tip 2: Handling Environment Variables</h3>\n<p>Be careful when marking environment variables with `<strong>next.config.env.NEXT_PUBLIC_*</strong>` as these variables will be exposed in the browser and included in the JavaScript bundle. If you have sensitive API keys or secrets, make sure not to prefix them with `<strong>NEXT_PUBLIC_</strong>`, then they will only be available in a Node.js environment.</p>\n<h3>Tip 3: Understanding Caching in\u00a0Next.js</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*XAlTrLM3TOQwELA4\"></figure><p>Next.js caching behavior differs between development and production environments. In development mode, pages are rendered dynamically on every request by default. However, in production mode, Next.js attempts to render pages statically.</p>\n<p>To control caching in production, you can use the `<strong>revalidate</strong>` option or mark a page as `<strong>dynamic</strong>` explicitly.</p>\n<pre>// Revalidate every 5 seconds<br>export const revalidate = 5<br>// Force dynamic rendering<br>export const dynamic = 'force-dynamic'</pre>\n<h3>Tip 4: Fetching Data in Server Components</h3>\n<p>Avoid using API route handlers solely to fetch data for your server components. Instead, fetch the data directly within the server component. This approach allows Next.js to optimize the caching and reuse of data across multiple server components.</p>\n<p>If you need to reuse the same fetch logic across multiple components, consider creating a server action in the `<strong>server/</strong>` directory.</p>\n<pre>export async function getJoke() {<br>  const res = await fetch(\"https://api.example.com/joke\");<br>  const data = await res.json();<br>  if (res.ok) {<br>    return { success: true, joke: data.joke };<br>  } else {<br>    return { error: data.error };<br>  }<br>}<br>// app/page.jsx<br>import { getJoke } from \"../server/actions\";<br>export default async function Page() {<br>  const { success, joke, error } = await getJoke();<br>  if (success) {<br>    return &lt;div&gt;{joke}&lt;/div&gt;;<br>  } else {<br>    throw new Error(error);<br>  }<br>}</pre>\n<h3>Tip 5: Understanding Client and Server Components</h3>\n<p>By default, pages in Next.js are server components. You can render client components within server components to add interactivity.</p>\n<pre>\"use client\";<br>import { useState } from \"react\";<br>export default function ClientComponent() {<br>  const [count, setCount] = useState(0);<br>  return (<br>    &lt;div&gt;<br>      &lt;p&gt;Count: {count}&lt;/p&gt;<br>      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>}</pre>\n<p>Child components rendered within a client component automatically become client components as well, without the need for the `<strong>\u2019use client\u2019</strong>` directive.</p>\n<p>When working with providers (e.g., a theming provider), wrap the children with the provider in your layout, and the children will still be rendered as server components.</p>\n<pre>// app/layout.jsx<br>import { ThemeProvider } from \"your-theme-library\";<br>export default function RootLayout({ children }) {<br>  return &lt;ThemeProvider&gt;{children}&lt;/ThemeProvider&gt;;<br>}</pre>\n<h3>Conclusion</h3>\n<p>Next.js 14 is a powerful and feature-rich framework that streamlines the development of server-rendered React applications. While it introduces some new concepts and conventions, following the tips and tricks outlined in this blog post should help you navigate through the potential areas of confusion and ambiguity.</p>\n<p>By understanding how to work with images, handle environment variables, manage caching, fetch data in server components, and differentiate between client and server components, you\u2019ll be better equipped to build robust and efficient applications with Next.js\u00a014.</p>\n<p>Remember, practice and experience are key to mastering any new technology. Don\u2019t hesitate to explore the Next.js documentation, join the community forums, and experiment with the framework\u2019s features to solidify your understanding further.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=298d4ac495f5\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["nextjs14","nextjs","reactjs","javascript"]},{"title":"15 Libraries You Should Know if You Build with React","pubDate":"2024-06-06 06:10:18","link":"https://afzalimdad9.medium.com/15-libraries-you-should-know-if-you-build-with-react-524310407ab5?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/524310407ab5","author":"Afzal Imdad","thumbnail":"","description":"\n<h3>Introduction to\u00a0React</h3>\n<p>In the world of modern web development, React stands out as a powerful and versatile library for building user interfaces. Developed by Meta (formerly Facebook), React has gained immense popularity among developers and is widely used in various applications.</p>\n<h3>What is\u00a0React?</h3>\n<p>React is a free and open-source front-end JavaScript library that simplifies the process of building dynamic and interactive user interfaces. It adopts a component-based architecture, allowing developers to create reusable UI components that can be composed together to build complex applications.</p>\n<h3>React in\u00a0Action</h3>\n<p>React is widely used in the development of popular websites and web applications, including:</p>\n<ul>\n<li>Facebook</li>\n<li>Instagram</li>\n<li>Netflix</li>\n<li>Airbnb</li>\n<li>Twitter</li>\n<li>WhatsApp Web</li>\n<li>Pinterest</li>\n<li>Twitch</li>\n</ul>\n<h3>Exploring React Libraries</h3>\n<h3>What is a\u00a0Library?</h3>\n<p>In coding, a library refers to a collection of pre-written code that developers can leverage to simplify and expedite their programming tasks. These libraries provide reusable functionality that can be integrated into different applications, reducing development time and\u00a0effort.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*kS-wIvw2MYCsxFrV\"></figure><p>Liberary will help you in less coding and\u00a0effort</p>\n<h3>Essential Libraries for React Development</h3>\n<h3>1. Axios</h3>\n<pre>npm i axios</pre>\n<p>Axios is a simple promise based HTTP client for the browser and node.js. Axios provides a simple-to-use library in a small package with a very extensible interface.</p>\n<pre>async function getUser() {<br>  try {<br>    const response = await axios.get('/user?ID=12345');<br>    console.log(response);<br>  } catch (error) {<br>    console.error(error);<br>  }<br>}</pre>\n<p>Instead of using Fetch we can use Axios and reduce the line of code by hitting API with the Axios\u00a0library</p>\n<h3>2. Formik:</h3>\n<p>Formik is a free, open-source library that helps build and process form data in React applications. It provides a simple API and built-in validation, making it easy to collect and manipulate input data. Formik is used by companies like Airbnb, Walmart, Lyft, and\u00a0Stripe.</p>\n<pre>npm i formik</pre>\n<pre>import React from 'react';<br>import { Formik, Form, Field, ErrorMessage } from 'formik';<br>const initialValues = {<br>  firstName: '',<br>  lastName: '',<br>  email: '',<br>};<br>const onSubmit = (values) =&gt; {<br>  console.log(values);<br>};<br>const validate = (values) =&gt; {<br>  const errors = {};<br>  if (!values.firstName) {<br>    errors.firstName = 'Required';<br>  }<br>  if (!values.lastName) {<br>    errors.lastName = 'Required';<br>  }<br>  if (!values.email) {<br>    errors.email = 'Required';<br>  } else if (!/^\\S+@\\S+\\.\\S+$/.test(values.email)) {<br>    errors.email = 'Invalid email address';<br>  }<br>  return errors;<br>};<br>const SampleForm = () =&gt; {<br>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;Sample Form&lt;/h1&gt;<br>      &lt;Formik<br>        initialValues={initialValues}<br>        onSubmit={onSubmit}<br>        validate={validate}<br>      &gt;<br>        {({ isSubmitting }) =&gt; (<br>          &lt;Form&gt;<br>            &lt;div&gt;<br>              &lt;label htmlFor=\"firstName\"&gt;First Name:&lt;/label&gt;<br>              &lt;Field type=\"text\" id=\"firstName\" name=\"firstName\" /&gt;<br>              &lt;ErrorMessage name=\"firstName\" component=\"div\" /&gt;<br>            &lt;/div&gt;<br>            &lt;div&gt;<br>              &lt;label htmlFor=\"lastName\"&gt;Last Name:&lt;/label&gt;<br>              &lt;Field type=\"text\" id=\"lastName\" name=\"lastName\" /&gt;<br>              &lt;ErrorMessage name=\"lastName\" component=\"div\" /&gt;<br>            &lt;/div&gt;<br>            &lt;div&gt;<br>              &lt;label htmlFor=\"email\"&gt;Email:&lt;/label&gt;<br>              &lt;Field type=\"email\" id=\"email\" name=\"email\" /&gt;<br>              &lt;ErrorMessage name=\"email\" component=\"div\" /&gt;<br>            &lt;/div&gt;<br>            &lt;button type=\"submit\" disabled={isSubmitting}&gt;<br>              Submit<br>            &lt;/button&gt;<br>          &lt;/Form&gt;<br>        )}<br>      &lt;/Formik&gt;<br>    &lt;/div&gt;<br>  );<br>};<br>export default SampleForm;</pre>\n<p><em>Formik simplifies form validation in React applications by providing an intuitive API for managing form state and validation logic.</em></p>\n<h3>3. React\u00a0Helmet</h3>\n<p>React Helmet, for instance, can be used to dynamically set the document\u2019s title, description, and meta tags. This comes in very handy when you need to update the meta tags for SEO. React Helmet supports all valid head tags, including title, style, base, meta, link, script, and NoScript.</p>\n<pre>npm i react-helmet</pre>\n<pre>import React from \"react\";<br>import {Helmet} from \"react-helmet\";<br>class Application extends React.Component {<br>  render () {<br>    return (<br>        &lt;div className=\"application\"&gt;<br>            &lt;Helmet&gt;<br>                &lt;meta charSet=\"utf-8\" /&gt;<br>                &lt;title&gt;My Title&lt;/title&gt;<br>                &lt;link rel=\"canonical\" href=\"http://mysite.com/example\" /&gt;<br>            &lt;/Helmet&gt;<br>            ...<br>        &lt;/div&gt;<br>    );<br>  }<br>};</pre>\n<p>React Helmet can help you improve the SEO of your website by making it easier to set and update the meta tags that search engines use to index and rank your pages. By providing accurate and up-to-date information about your content, you can help search engines understand your website better and improve your ranking in search\u00a0results.</p>\n<p>React Helmet can also help you enhance the social media sharing of your website by making it easier to set and update the meta tags that social media platforms use to display your content when it is\u00a0shared.</p>\n<h3>4. React\u00a0-Redux:</h3>\n<p>Redux is a JS library for predictable and maintainable global state management.</p>\n<pre>npm i react-redux</pre>\n<p>Basic Example of React-Redux</p>\n<pre>import React from 'react';<br>import { createStore } from 'redux';<br>import { Provider, connect } from 'react-redux';<br>// Define the initial state<br>const initialState = {<br>  count: 0<br>};<br>// Define reducer function<br>const reducer = (state = initialState, action) =&gt; {<br>  switch (action.type) {<br>    case 'INCREMENT':<br>      return {<br>        ...state,<br>        count: state.count + 1<br>      };<br>    case 'DECREMENT':<br>      return {<br>        ...state,<br>        count: state.count - 1<br>      };<br>    default:<br>      return state;<br>  }<br>};<br>// Create the Redux store<br>const store = createStore(reducer);<br>// Define action creators<br>const increment = () =&gt; ({ type: 'INCREMENT' });<br>const decrement = () =&gt; ({ type: 'DECREMENT' });<br>// Counter component<br>const Counter = ({ count, increment, decrement }) =&gt; {<br>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;Counter: {count}&lt;/h1&gt;<br>      &lt;button onClick={increment}&gt;Increment&lt;/button&gt;<br>      &lt;button onClick={decrement}&gt;Decrement&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>};<br>// Connect Counter component to Redux store<br>const ConnectedCounter = connect(<br>  state =&gt; ({ count: state.count }),<br>  { increment, decrement }<br>)(Counter);<br>// App component<br>const App = () =&gt; {<br>  return (<br>    &lt;Provider store={store}&gt;<br>      &lt;ConnectedCounter /&gt;<br>    &lt;/Provider&gt;<br>  );<br>};<br>export default App;</pre>\n<p>The whole global state of your app is stored in an object tree inside a single <em>store</em>. The only way to change the state tree is to create an <em>action</em>, an object describing what happened, and <em>dispatch</em> it to the store. To specify how a state gets updated in response to an action, you write pure <em>reducer</em> functions that calculate a new state based on the old state and the\u00a0action.</p>\n<h3>5. React Router\u00a0DOM</h3>\n<pre>npm i react-router-dom</pre>\n<p>React Router Dom is commonly used for routing and managing navigation in web applications built using React. It simplifies the routing process by providing an API to define, navigate, and render\u00a0routes.</p>\n<pre>import * as React from \"react\";<br>import * as ReactDOM from \"react-dom/client\";<br>import {<br>  createBrowserRouter,<br>  RouterProvider,<br>} from \"react-router-dom\";<br>import \"./index.css\";<br>const router = createBrowserRouter([<br>  {<br>    path: \"/\",<br>    element: &lt;div&gt;Hello world!&lt;/div&gt;,<br>  },<br>]);<br>ReactDOM.createRoot(document.getElementById(\"root\")).render(<br>  &lt;React.StrictMode&gt;<br>    &lt;RouterProvider router={router} /&gt;<br>  &lt;/React.StrictMode&gt;<br>);</pre>\n<p>The major advantage of react-router is that the page does not have to be refreshed when a link to another page is\u00a0clicked\u2026</p>\n<h3>6. Dotenv:</h3>\n<pre>npm install dotenv --save</pre>\n<p>Dotenv is a zero-dependency module that loads environment variables from a\u00a0.env file into <a href=\"https://nodejs.org/docs/latest/api/process.html#process_process_env\">process.env</a>. Storing configuration in the environment separate from the codebase to secure the keys and information that should be kept confidential like passwords and secret\u00a0key</p>\n<pre>import React, { useEffect, useState } from 'react';<br>require('dotenv').config();<br>const App = () =&gt; {<br>  const [data, setData] = useState(null);<br>  useEffect(() =&gt; {<br>    // Fetch data from the API using the environment variable<br>    fetch(process.env.REACT_APP_API_URL)<br>      .then(response =&gt; response.json())<br>      .then(data =&gt; setData(data))<br>      .catch(error =&gt; console.error('Error fetching data:', error));<br>  }, []);<br>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;Data from API&lt;/h1&gt;<br>      {data ? (<br>        &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt;<br>      ) : (<br>        &lt;p&gt;Loading...&lt;/p&gt;<br>      )}<br>    &lt;/div&gt;<br>  );<br>};<br>export default App;</pre>\n<h3>7. esLint</h3>\n<pre>npm i eslint</pre>\n<p>ESLint is a popular open-source JavaScript linting utility. It analyzes your code for potential errors, enforces coding standards, and improves code quality. ESLint can also help you as a developer to identify and fix common mistakes, use best practices, and maintain consistency across your codebase.</p>\n<p>Basic example</p>\n<pre>import js from \"@eslint/js\";<br>export default [<br>    js.configs.recommended,<br>   {<br>       rules: {<br>           \"no-unused-vars\": \"warn\",<br>           \"no-undef\": \"warn\"<br>       }<br>   }<br>];</pre>\n<pre>import React from 'react';<br>import Header from './components/Header';<br>const App = () =&gt; {<br>    return (<br>        &lt;div&gt;<br>            &lt;Header /&gt;<br>        &lt;/div&gt;<br>    );<br>};<br>export default App;</pre>\n<p>As you can see, all we want to do is to render that one component. But if we run eslinton this file, we'll get a couple of\u00a0errors.</p>\n<pre>1:8  warning  'React' is defined but never used   no-unused-vars<br>2:8  warning  'Header' is defined but never used  no-unused-vars</pre>\n<h3>8. date-fns</h3>\n<pre>npm i date-fns</pre>\n<p>date-fns provides the most comprehensive, yet simple and consistent toolset for manipulating JavaScript dates in a browser &amp;\u00a0Node.js.</p>\n<pre>// Parse a date string<br>const date = dateFns.parse('2023-08-04');<br>// Format a date<br>const formattedDate = dateFns.format(date, 'MM/dd/yyyy');<br>// Compare two dates<br>const areDatesEqual = dateFns.isEqual(date1, date2);<br>// Calculate the difference between two dates<br>const differenceInDays = dateFns.differenceInDays(date1, date2);</pre>\n<p>Date-fns is a powerful and versatile library for working with dates and times in JavaScript. It is a great choice for projects of all\u00a0sizes.</p>\n<h3>9. react-error-boundaries</h3>\n<pre>npm install react-error-boundary</pre>\n<p>Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that\u00a0crashed</p>\n<p><em>The component supports several ways to render a fallback (as shown\u00a0below).</em></p>\n<pre>\"use client\";</pre>\n<pre>import { ErrorBoundary } from \"react-error-boundary\";</pre>\n<pre>function fallbackRender({ error, resetErrorBoundary }) {<br>  // Call resetErrorBoundary() to reset the error boundary and retry the render.</pre>\n<pre>  return (<br>    &lt;div role=\"alert\"&gt;<br>      &lt;p&gt;Something went wrong:&lt;/p&gt;<br>      &lt;pre style={{ color: \"red\" }}&gt;{error.message}&lt;/pre&gt;<br>    &lt;/div&gt;<br>  );<br>}</pre>\n<pre>&lt;ErrorBoundary<br>  fallbackRender={fallbackRender}<br>  onReset={(details) =&gt; {<br>    // Reset the state of your app so the error doesn't happen again<br>  }}<br>&gt;<br>  &lt;ExampleApplication /&gt;<br>&lt;/ErrorBoundary&gt;;</pre>\n<p>Wrap an ErrorBoundary component around other React components to \"catch\" errors and render a fallback UI (<em>A fallback UI is a temporary UI that renders in place of the actual UI when it hasn\u2019t finished loading</em>).</p>\n<h3>10. sweetalert</h3>\n<pre>npm install sweetalert --save</pre>\n<p>SweetAlert is a JavaScript library that provides alternative alert and modal dialog boxes for web applications. It can replace built-in alert functions and improve the user interface of default browser\u00a0dialogs.</p>\n<pre>import React from 'react';<br>import Swal from 'sweetalert';</pre>\n<pre>const SweetAlertExample = () =&gt; {<br>  const handleClick = () =&gt; {<br>    Swal.fire({<br>      title: 'Hello!',<br>      text: 'This is a SweetAlert dialog.',<br>      icon: 'success',<br>      confirmButtonText: 'OK'<br>    });<br>  };</pre>\n<pre>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;SweetAlert Example&lt;/h1&gt;<br>      &lt;button onClick={handleClick}&gt;Show SweetAlert&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<pre>export default SweetAlertExample;</pre>\n<h3>11. styled-components</h3>\n<pre>npm i styled-components</pre>\n<p>Styled-components is an open-source library that allows React and React Native developers to define UI components and styles in a single file location. It uses CSS in JavaScript (JS), which allows developers to write CSS code directly in the JavaScript file.</p>\n<pre>import React from 'react';</pre>\n<pre>import styled from 'styled-components';</pre>\n<pre>// Create a &lt;Title&gt; react component that renders an &lt;h1&gt; which is<br>// centered, palevioletred and sized at 1.5em<br>const Title = styled.h1`<br>  font-size: 1.5em;<br>  text-align: center;<br>  color: palevioletred;<br>`;</pre>\n<pre>// Create a &lt;Wrapper&gt; react component that renders a &lt;section&gt; with<br>// some padding and a papayawhip background<br>const Wrapper = styled.section`<br>  padding: 4em;<br>  background: papayawhip;<br>`;</pre>\n<pre>function MyUI() {<br>  return (<br>    // Use them like any other React component \u2013 except they're styled!<br>    &lt;Wrapper&gt;<br>      &lt;Title&gt;Hello World, this is my first styled component!&lt;/Title&gt;<br>    &lt;/Wrapper&gt;<br>  );<br>}</pre>\n<h3>12. react-tooltip</h3>\n<pre>npm install react-tooltip</pre>\n<p>The react-tooltip package provides a &lt;Tooltip/&gt; component that can be bound to an anchor element and used to display element-specific information.</p>\n<pre>import React from 'react';<br>import ReactTooltip from 'react-tooltip';</pre>\n<pre>const TooltipExample = () =&gt; {<br>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;React Tooltip Example&lt;/h1&gt;<br>      &lt;button data-tip=\"Hello, I am a tooltip!\" data-for=\"tooltip\"&gt;Hover me&lt;/button&gt;<br>      &lt;ReactTooltip id=\"tooltip\" place=\"bottom\" effect=\"solid\" /&gt;<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<pre>export default TooltipExample;</pre>\n<h3>13. React\u00a0Spinner</h3>\n<pre>npm install --save react-spinners</pre>\n<p>react-spinner-loader provides a simple React SVG spinner component which can be implemented for async-await operation before data loads to the\u00a0view.</p>\n<pre>import React from 'react';<br>import { css } from '@emotion/react';<br>import { RingLoader } from 'react-spinners';</pre>\n<pre>const override = css`<br>  display: block;<br>  margin: 0 auto;<br>  border-color: red;<br>`;</pre>\n<pre>const SpinnerExample = () =&gt; {<br>  return (<br>    &lt;div className=\"sweet-loading\"&gt;<br>      &lt;RingLoader color={'#123abc'} css={override} size={150} loading={true} /&gt;<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<pre>export default SpinnerExample;</pre>\n<h3>14. Yup</h3>\n<pre>npm i yup</pre>\n<p>Yup is a schema builder for runtime value parsing and validation. Define a schema, transform a value to match, assert the shape of an existing value, or both. Yup, schema are extremely expressive and allows modeling complex, interdependent validations, or value transformation.</p>\n<pre>import * as yup from 'yup';</pre>\n<pre>const personSchema = yup.object({<br>  firstName: yup.string().defined(),<br>  nickName: yup.string().default('').nullable(),<br>  sex: yup<br>    .mixed()<br>    .oneOf(['male', 'female', 'other'] as const)<br>    .defined(),<br>  email: yup.string().nullable().email(),<br>  birthDate: yup.date().nullable().min(new Date(1900, 0, 1)),<br>});</pre>\n<h3>15. @testing-library/jest-dom</h3>\n<pre>npm install --save-dev @testing-library/jest-dom</pre>\n<p>@testing-library/jest-dom is a library that provides custom matchers to test the state of the DOM. It\u2019s an extension for the Jest testing framework that enables assertions on DOM elements, attributes, and\u00a0content.</p>\n<pre>&lt;button data-testid=\"button\" type=\"submit\" disabled&gt;submit&lt;/button&gt;<br>&lt;fieldset disabled&gt;&lt;input type=\"text\" data-testid=\"input\" /&gt;&lt;/fieldset&gt;<br>&lt;a href=\"...\" disabled&gt;link&lt;/a&gt;</pre>\n<pre>expect(getByTestId('button')).toBeDisabled()<br>expect(getByTestId('input')).toBeDisabled()<br>expect(getByText('link')).not.toBeDisabled()</pre>\n<h3>Conclusion</h3>\n<blockquote><em>By leveraging these libraries, developers can enhance the functionality, performance, and user experience of their React applications while reducing development time and\u00a0effort.</em></blockquote>\n<blockquote><em>Overall, this comprehensive overview provides valuable insights into the ecosystem of tools and libraries available for React development, empowering developers to build robust and feature-rich applications effectively.</em></blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=524310407ab5\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Introduction to\u00a0React</h3>\n<p>In the world of modern web development, React stands out as a powerful and versatile library for building user interfaces. Developed by Meta (formerly Facebook), React has gained immense popularity among developers and is widely used in various applications.</p>\n<h3>What is\u00a0React?</h3>\n<p>React is a free and open-source front-end JavaScript library that simplifies the process of building dynamic and interactive user interfaces. It adopts a component-based architecture, allowing developers to create reusable UI components that can be composed together to build complex applications.</p>\n<h3>React in\u00a0Action</h3>\n<p>React is widely used in the development of popular websites and web applications, including:</p>\n<ul>\n<li>Facebook</li>\n<li>Instagram</li>\n<li>Netflix</li>\n<li>Airbnb</li>\n<li>Twitter</li>\n<li>WhatsApp Web</li>\n<li>Pinterest</li>\n<li>Twitch</li>\n</ul>\n<h3>Exploring React Libraries</h3>\n<h3>What is a\u00a0Library?</h3>\n<p>In coding, a library refers to a collection of pre-written code that developers can leverage to simplify and expedite their programming tasks. These libraries provide reusable functionality that can be integrated into different applications, reducing development time and\u00a0effort.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*kS-wIvw2MYCsxFrV\"></figure><p>Liberary will help you in less coding and\u00a0effort</p>\n<h3>Essential Libraries for React Development</h3>\n<h3>1. Axios</h3>\n<pre>npm i axios</pre>\n<p>Axios is a simple promise based HTTP client for the browser and node.js. Axios provides a simple-to-use library in a small package with a very extensible interface.</p>\n<pre>async function getUser() {<br>  try {<br>    const response = await axios.get('/user?ID=12345');<br>    console.log(response);<br>  } catch (error) {<br>    console.error(error);<br>  }<br>}</pre>\n<p>Instead of using Fetch we can use Axios and reduce the line of code by hitting API with the Axios\u00a0library</p>\n<h3>2. Formik:</h3>\n<p>Formik is a free, open-source library that helps build and process form data in React applications. It provides a simple API and built-in validation, making it easy to collect and manipulate input data. Formik is used by companies like Airbnb, Walmart, Lyft, and\u00a0Stripe.</p>\n<pre>npm i formik</pre>\n<pre>import React from 'react';<br>import { Formik, Form, Field, ErrorMessage } from 'formik';<br>const initialValues = {<br>  firstName: '',<br>  lastName: '',<br>  email: '',<br>};<br>const onSubmit = (values) =&gt; {<br>  console.log(values);<br>};<br>const validate = (values) =&gt; {<br>  const errors = {};<br>  if (!values.firstName) {<br>    errors.firstName = 'Required';<br>  }<br>  if (!values.lastName) {<br>    errors.lastName = 'Required';<br>  }<br>  if (!values.email) {<br>    errors.email = 'Required';<br>  } else if (!/^\\S+@\\S+\\.\\S+$/.test(values.email)) {<br>    errors.email = 'Invalid email address';<br>  }<br>  return errors;<br>};<br>const SampleForm = () =&gt; {<br>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;Sample Form&lt;/h1&gt;<br>      &lt;Formik<br>        initialValues={initialValues}<br>        onSubmit={onSubmit}<br>        validate={validate}<br>      &gt;<br>        {({ isSubmitting }) =&gt; (<br>          &lt;Form&gt;<br>            &lt;div&gt;<br>              &lt;label htmlFor=\"firstName\"&gt;First Name:&lt;/label&gt;<br>              &lt;Field type=\"text\" id=\"firstName\" name=\"firstName\" /&gt;<br>              &lt;ErrorMessage name=\"firstName\" component=\"div\" /&gt;<br>            &lt;/div&gt;<br>            &lt;div&gt;<br>              &lt;label htmlFor=\"lastName\"&gt;Last Name:&lt;/label&gt;<br>              &lt;Field type=\"text\" id=\"lastName\" name=\"lastName\" /&gt;<br>              &lt;ErrorMessage name=\"lastName\" component=\"div\" /&gt;<br>            &lt;/div&gt;<br>            &lt;div&gt;<br>              &lt;label htmlFor=\"email\"&gt;Email:&lt;/label&gt;<br>              &lt;Field type=\"email\" id=\"email\" name=\"email\" /&gt;<br>              &lt;ErrorMessage name=\"email\" component=\"div\" /&gt;<br>            &lt;/div&gt;<br>            &lt;button type=\"submit\" disabled={isSubmitting}&gt;<br>              Submit<br>            &lt;/button&gt;<br>          &lt;/Form&gt;<br>        )}<br>      &lt;/Formik&gt;<br>    &lt;/div&gt;<br>  );<br>};<br>export default SampleForm;</pre>\n<p><em>Formik simplifies form validation in React applications by providing an intuitive API for managing form state and validation logic.</em></p>\n<h3>3. React\u00a0Helmet</h3>\n<p>React Helmet, for instance, can be used to dynamically set the document\u2019s title, description, and meta tags. This comes in very handy when you need to update the meta tags for SEO. React Helmet supports all valid head tags, including title, style, base, meta, link, script, and NoScript.</p>\n<pre>npm i react-helmet</pre>\n<pre>import React from \"react\";<br>import {Helmet} from \"react-helmet\";<br>class Application extends React.Component {<br>  render () {<br>    return (<br>        &lt;div className=\"application\"&gt;<br>            &lt;Helmet&gt;<br>                &lt;meta charSet=\"utf-8\" /&gt;<br>                &lt;title&gt;My Title&lt;/title&gt;<br>                &lt;link rel=\"canonical\" href=\"http://mysite.com/example\" /&gt;<br>            &lt;/Helmet&gt;<br>            ...<br>        &lt;/div&gt;<br>    );<br>  }<br>};</pre>\n<p>React Helmet can help you improve the SEO of your website by making it easier to set and update the meta tags that search engines use to index and rank your pages. By providing accurate and up-to-date information about your content, you can help search engines understand your website better and improve your ranking in search\u00a0results.</p>\n<p>React Helmet can also help you enhance the social media sharing of your website by making it easier to set and update the meta tags that social media platforms use to display your content when it is\u00a0shared.</p>\n<h3>4. React\u00a0-Redux:</h3>\n<p>Redux is a JS library for predictable and maintainable global state management.</p>\n<pre>npm i react-redux</pre>\n<p>Basic Example of React-Redux</p>\n<pre>import React from 'react';<br>import { createStore } from 'redux';<br>import { Provider, connect } from 'react-redux';<br>// Define the initial state<br>const initialState = {<br>  count: 0<br>};<br>// Define reducer function<br>const reducer = (state = initialState, action) =&gt; {<br>  switch (action.type) {<br>    case 'INCREMENT':<br>      return {<br>        ...state,<br>        count: state.count + 1<br>      };<br>    case 'DECREMENT':<br>      return {<br>        ...state,<br>        count: state.count - 1<br>      };<br>    default:<br>      return state;<br>  }<br>};<br>// Create the Redux store<br>const store = createStore(reducer);<br>// Define action creators<br>const increment = () =&gt; ({ type: 'INCREMENT' });<br>const decrement = () =&gt; ({ type: 'DECREMENT' });<br>// Counter component<br>const Counter = ({ count, increment, decrement }) =&gt; {<br>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;Counter: {count}&lt;/h1&gt;<br>      &lt;button onClick={increment}&gt;Increment&lt;/button&gt;<br>      &lt;button onClick={decrement}&gt;Decrement&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>};<br>// Connect Counter component to Redux store<br>const ConnectedCounter = connect(<br>  state =&gt; ({ count: state.count }),<br>  { increment, decrement }<br>)(Counter);<br>// App component<br>const App = () =&gt; {<br>  return (<br>    &lt;Provider store={store}&gt;<br>      &lt;ConnectedCounter /&gt;<br>    &lt;/Provider&gt;<br>  );<br>};<br>export default App;</pre>\n<p>The whole global state of your app is stored in an object tree inside a single <em>store</em>. The only way to change the state tree is to create an <em>action</em>, an object describing what happened, and <em>dispatch</em> it to the store. To specify how a state gets updated in response to an action, you write pure <em>reducer</em> functions that calculate a new state based on the old state and the\u00a0action.</p>\n<h3>5. React Router\u00a0DOM</h3>\n<pre>npm i react-router-dom</pre>\n<p>React Router Dom is commonly used for routing and managing navigation in web applications built using React. It simplifies the routing process by providing an API to define, navigate, and render\u00a0routes.</p>\n<pre>import * as React from \"react\";<br>import * as ReactDOM from \"react-dom/client\";<br>import {<br>  createBrowserRouter,<br>  RouterProvider,<br>} from \"react-router-dom\";<br>import \"./index.css\";<br>const router = createBrowserRouter([<br>  {<br>    path: \"/\",<br>    element: &lt;div&gt;Hello world!&lt;/div&gt;,<br>  },<br>]);<br>ReactDOM.createRoot(document.getElementById(\"root\")).render(<br>  &lt;React.StrictMode&gt;<br>    &lt;RouterProvider router={router} /&gt;<br>  &lt;/React.StrictMode&gt;<br>);</pre>\n<p>The major advantage of react-router is that the page does not have to be refreshed when a link to another page is\u00a0clicked\u2026</p>\n<h3>6. Dotenv:</h3>\n<pre>npm install dotenv --save</pre>\n<p>Dotenv is a zero-dependency module that loads environment variables from a\u00a0.env file into <a href=\"https://nodejs.org/docs/latest/api/process.html#process_process_env\">process.env</a>. Storing configuration in the environment separate from the codebase to secure the keys and information that should be kept confidential like passwords and secret\u00a0key</p>\n<pre>import React, { useEffect, useState } from 'react';<br>require('dotenv').config();<br>const App = () =&gt; {<br>  const [data, setData] = useState(null);<br>  useEffect(() =&gt; {<br>    // Fetch data from the API using the environment variable<br>    fetch(process.env.REACT_APP_API_URL)<br>      .then(response =&gt; response.json())<br>      .then(data =&gt; setData(data))<br>      .catch(error =&gt; console.error('Error fetching data:', error));<br>  }, []);<br>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;Data from API&lt;/h1&gt;<br>      {data ? (<br>        &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt;<br>      ) : (<br>        &lt;p&gt;Loading...&lt;/p&gt;<br>      )}<br>    &lt;/div&gt;<br>  );<br>};<br>export default App;</pre>\n<h3>7. esLint</h3>\n<pre>npm i eslint</pre>\n<p>ESLint is a popular open-source JavaScript linting utility. It analyzes your code for potential errors, enforces coding standards, and improves code quality. ESLint can also help you as a developer to identify and fix common mistakes, use best practices, and maintain consistency across your codebase.</p>\n<p>Basic example</p>\n<pre>import js from \"@eslint/js\";<br>export default [<br>    js.configs.recommended,<br>   {<br>       rules: {<br>           \"no-unused-vars\": \"warn\",<br>           \"no-undef\": \"warn\"<br>       }<br>   }<br>];</pre>\n<pre>import React from 'react';<br>import Header from './components/Header';<br>const App = () =&gt; {<br>    return (<br>        &lt;div&gt;<br>            &lt;Header /&gt;<br>        &lt;/div&gt;<br>    );<br>};<br>export default App;</pre>\n<p>As you can see, all we want to do is to render that one component. But if we run eslinton this file, we'll get a couple of\u00a0errors.</p>\n<pre>1:8  warning  'React' is defined but never used   no-unused-vars<br>2:8  warning  'Header' is defined but never used  no-unused-vars</pre>\n<h3>8. date-fns</h3>\n<pre>npm i date-fns</pre>\n<p>date-fns provides the most comprehensive, yet simple and consistent toolset for manipulating JavaScript dates in a browser &amp;\u00a0Node.js.</p>\n<pre>// Parse a date string<br>const date = dateFns.parse('2023-08-04');<br>// Format a date<br>const formattedDate = dateFns.format(date, 'MM/dd/yyyy');<br>// Compare two dates<br>const areDatesEqual = dateFns.isEqual(date1, date2);<br>// Calculate the difference between two dates<br>const differenceInDays = dateFns.differenceInDays(date1, date2);</pre>\n<p>Date-fns is a powerful and versatile library for working with dates and times in JavaScript. It is a great choice for projects of all\u00a0sizes.</p>\n<h3>9. react-error-boundaries</h3>\n<pre>npm install react-error-boundary</pre>\n<p>Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that\u00a0crashed</p>\n<p><em>The component supports several ways to render a fallback (as shown\u00a0below).</em></p>\n<pre>\"use client\";</pre>\n<pre>import { ErrorBoundary } from \"react-error-boundary\";</pre>\n<pre>function fallbackRender({ error, resetErrorBoundary }) {<br>  // Call resetErrorBoundary() to reset the error boundary and retry the render.</pre>\n<pre>  return (<br>    &lt;div role=\"alert\"&gt;<br>      &lt;p&gt;Something went wrong:&lt;/p&gt;<br>      &lt;pre style={{ color: \"red\" }}&gt;{error.message}&lt;/pre&gt;<br>    &lt;/div&gt;<br>  );<br>}</pre>\n<pre>&lt;ErrorBoundary<br>  fallbackRender={fallbackRender}<br>  onReset={(details) =&gt; {<br>    // Reset the state of your app so the error doesn't happen again<br>  }}<br>&gt;<br>  &lt;ExampleApplication /&gt;<br>&lt;/ErrorBoundary&gt;;</pre>\n<p>Wrap an ErrorBoundary component around other React components to \"catch\" errors and render a fallback UI (<em>A fallback UI is a temporary UI that renders in place of the actual UI when it hasn\u2019t finished loading</em>).</p>\n<h3>10. sweetalert</h3>\n<pre>npm install sweetalert --save</pre>\n<p>SweetAlert is a JavaScript library that provides alternative alert and modal dialog boxes for web applications. It can replace built-in alert functions and improve the user interface of default browser\u00a0dialogs.</p>\n<pre>import React from 'react';<br>import Swal from 'sweetalert';</pre>\n<pre>const SweetAlertExample = () =&gt; {<br>  const handleClick = () =&gt; {<br>    Swal.fire({<br>      title: 'Hello!',<br>      text: 'This is a SweetAlert dialog.',<br>      icon: 'success',<br>      confirmButtonText: 'OK'<br>    });<br>  };</pre>\n<pre>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;SweetAlert Example&lt;/h1&gt;<br>      &lt;button onClick={handleClick}&gt;Show SweetAlert&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<pre>export default SweetAlertExample;</pre>\n<h3>11. styled-components</h3>\n<pre>npm i styled-components</pre>\n<p>Styled-components is an open-source library that allows React and React Native developers to define UI components and styles in a single file location. It uses CSS in JavaScript (JS), which allows developers to write CSS code directly in the JavaScript file.</p>\n<pre>import React from 'react';</pre>\n<pre>import styled from 'styled-components';</pre>\n<pre>// Create a &lt;Title&gt; react component that renders an &lt;h1&gt; which is<br>// centered, palevioletred and sized at 1.5em<br>const Title = styled.h1`<br>  font-size: 1.5em;<br>  text-align: center;<br>  color: palevioletred;<br>`;</pre>\n<pre>// Create a &lt;Wrapper&gt; react component that renders a &lt;section&gt; with<br>// some padding and a papayawhip background<br>const Wrapper = styled.section`<br>  padding: 4em;<br>  background: papayawhip;<br>`;</pre>\n<pre>function MyUI() {<br>  return (<br>    // Use them like any other React component \u2013 except they're styled!<br>    &lt;Wrapper&gt;<br>      &lt;Title&gt;Hello World, this is my first styled component!&lt;/Title&gt;<br>    &lt;/Wrapper&gt;<br>  );<br>}</pre>\n<h3>12. react-tooltip</h3>\n<pre>npm install react-tooltip</pre>\n<p>The react-tooltip package provides a &lt;Tooltip/&gt; component that can be bound to an anchor element and used to display element-specific information.</p>\n<pre>import React from 'react';<br>import ReactTooltip from 'react-tooltip';</pre>\n<pre>const TooltipExample = () =&gt; {<br>  return (<br>    &lt;div&gt;<br>      &lt;h1&gt;React Tooltip Example&lt;/h1&gt;<br>      &lt;button data-tip=\"Hello, I am a tooltip!\" data-for=\"tooltip\"&gt;Hover me&lt;/button&gt;<br>      &lt;ReactTooltip id=\"tooltip\" place=\"bottom\" effect=\"solid\" /&gt;<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<pre>export default TooltipExample;</pre>\n<h3>13. React\u00a0Spinner</h3>\n<pre>npm install --save react-spinners</pre>\n<p>react-spinner-loader provides a simple React SVG spinner component which can be implemented for async-await operation before data loads to the\u00a0view.</p>\n<pre>import React from 'react';<br>import { css } from '@emotion/react';<br>import { RingLoader } from 'react-spinners';</pre>\n<pre>const override = css`<br>  display: block;<br>  margin: 0 auto;<br>  border-color: red;<br>`;</pre>\n<pre>const SpinnerExample = () =&gt; {<br>  return (<br>    &lt;div className=\"sweet-loading\"&gt;<br>      &lt;RingLoader color={'#123abc'} css={override} size={150} loading={true} /&gt;<br>    &lt;/div&gt;<br>  );<br>};</pre>\n<pre>export default SpinnerExample;</pre>\n<h3>14. Yup</h3>\n<pre>npm i yup</pre>\n<p>Yup is a schema builder for runtime value parsing and validation. Define a schema, transform a value to match, assert the shape of an existing value, or both. Yup, schema are extremely expressive and allows modeling complex, interdependent validations, or value transformation.</p>\n<pre>import * as yup from 'yup';</pre>\n<pre>const personSchema = yup.object({<br>  firstName: yup.string().defined(),<br>  nickName: yup.string().default('').nullable(),<br>  sex: yup<br>    .mixed()<br>    .oneOf(['male', 'female', 'other'] as const)<br>    .defined(),<br>  email: yup.string().nullable().email(),<br>  birthDate: yup.date().nullable().min(new Date(1900, 0, 1)),<br>});</pre>\n<h3>15. @testing-library/jest-dom</h3>\n<pre>npm install --save-dev @testing-library/jest-dom</pre>\n<p>@testing-library/jest-dom is a library that provides custom matchers to test the state of the DOM. It\u2019s an extension for the Jest testing framework that enables assertions on DOM elements, attributes, and\u00a0content.</p>\n<pre>&lt;button data-testid=\"button\" type=\"submit\" disabled&gt;submit&lt;/button&gt;<br>&lt;fieldset disabled&gt;&lt;input type=\"text\" data-testid=\"input\" /&gt;&lt;/fieldset&gt;<br>&lt;a href=\"...\" disabled&gt;link&lt;/a&gt;</pre>\n<pre>expect(getByTestId('button')).toBeDisabled()<br>expect(getByTestId('input')).toBeDisabled()<br>expect(getByText('link')).not.toBeDisabled()</pre>\n<h3>Conclusion</h3>\n<blockquote><em>By leveraging these libraries, developers can enhance the functionality, performance, and user experience of their React applications while reducing development time and\u00a0effort.</em></blockquote>\n<blockquote><em>Overall, this comprehensive overview provides valuable insights into the ecosystem of tools and libraries available for React development, empowering developers to build robust and feature-rich applications effectively.</em></blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=524310407ab5\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["should-know-about","coding","react","begginer","library-design"]},{"title":"190 Python Projects with Source Code","pubDate":"2024-04-15 19:00:03","link":"https://afzalimdad9.medium.com/190-python-projects-with-source-code-692f8775b0ca?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/692f8775b0ca","author":"Afzal Imdad","thumbnail":"","description":"\n<h3>190 Python Projects with Source Code: solved and explained for\u00a0free</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/1*Jdl3SYLIpoMy1Xt4Q9afJQ.png\"></figure><p>Python is one of the best programming languages. Due to its readability and beginner-friendly nature, it has been accepted by industries around the world. So to master Python for any field you have to work on projects. In this article, I will take you through more than 190 Python projects with source\u00a0code.</p>\n<h3>Python Projects with Source\u00a0Code</h3>\n<h3>Python Projects For Beginners:</h3>\n<ol>\n<li><a href=\"https://thecleverprogrammer.com/2022/06/29/number-guessing-game-using-python/\"><strong>Number Guessing\u00a0Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/05/26/group-anagrams-using-python/\"><strong>Group Anagrams using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/07/13/find-missing-number-using-python/\"><strong>Find Missing\u00a0Number</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/07/06/group-elements-of-same-indices-using-python/\"><strong>Group Elements of Same\u00a0Indices</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/03/31/mean-median-and-mode-using-python/\"><strong>Calculate Mean, Median, and Mode using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/02/10/execution-time-of-a-python-program/\"><strong>Calculate Execution Time of a Python\u00a0Program</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/06/22/count-number-of-words-in-a-column-using-python/\"><strong>Count Number of words in a\u00a0Column</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/05/12/rock-paper-scissors-game-using-python/\"><strong>Rock Paper Scissors Game using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/06/15/print-emojis-using-python/\"><strong>Print Emojis using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/06/01/correct-spellings-using-python/\"><strong>Correct Spellings using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/05/05/scraping-github-profile-using-python/\"><strong>Scraping Github Profile using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/04/07/visualize-linear-relationship-using-python/\"><strong>Visualize Linear Relationships using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/04/28/generate-text-using-python/\"><strong>Generate Text using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/03/10/scrape-table-from-a-website-using-python/\"><strong>Scrape Table From a Website using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/04/14/extract-text-from-pdf-with-python/\"><strong>Extract Text From PDF using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/03/17/reverse-a-string-using-python/\"><strong>Reversing a String using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/03/03/sequencematcher-in-python/\"><strong>Match Sequences using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/01/11/qr-code-using-python/\"><strong>QR Code using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/01/18/decode-a-qr-code-using-python/\"><strong>Decode a QR Code using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/02/17/create-dummy-data-using-python/\"><strong>Creating Dummy Data using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/02/03/remove-cuss-words-using-python/\"><strong>Remove Cuss Words using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/01/27/find-duplicate-values-using-python/\"><strong>Find Duplicate Values using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/12/07/detect-questions-using-python/\"><strong>Detect Questions using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/31/voice-recorder-using-python/\"><strong>Voice Recorder using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/02/24/reading-and-writing-csv-files-using-python/\"><strong>Reading and Writing CSV Files using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/12/22/box-plot-using-python/\"><strong>Box Plot using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/11/05/send-instagram-messages-using-python/\"><strong>Send Instagram Messages using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/09/09/age-calculator-using-python/\"><strong>Age Calculator using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/09/23/lcm-using-python/\"><strong>LCM using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/09/14/price-elasticity-of-demand-using-python/\"><strong>Price Elasticity of Demand using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/08/30/python-program-to-count-most-frequent-words-in-a-file/\"><strong>Find the Most Frequent Words in a\u00a0File</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/08/25/python-program-to-count-capital-letters-in-a-file/\"><strong>Find the Number of Capital Letters in a\u00a0File</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/11/16/index-of-maximum-value-in-a-python-list/\"><strong>Index of Maximum Value in a Python\u00a0List</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/08/index-of-minimum-value-in-a-python-list/\"><strong>Index of Minimum Value in a Python\u00a0List</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/31/voice-recorder-using-python/\"><strong>Voice Recorder using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/11/05/send-instagram-messages-using-python/\"><strong>Send Instagram Messages using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/23/animated-scatter-plot-using-python/\"><strong>Animated Scatter\u00a0Plot</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/20/create-font-art-using-python/\"><strong>Create Font Art using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/31/collage-maker-using-python/\"><strong>Collage Maker with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/08/05/phone-number-details-using-python/\"><strong>Get Phone Number Details using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/02/print-a-calendar-using-python/\"><strong>Display a Calendar using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/23/internet-speed-test-using-python/\"><strong>Internet Speed Test using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/26/text-to-handwriting-using-python/\"><strong>Text to Handwriting with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/29/shutdown-computer-using-python/\"><strong>Shutdown Computer using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/11/send-automatic-emails-using-python/\"><strong>Send Automatic Emails using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/22/defang-ip-address-using-python/\"><strong>Defang IP\u00a0Address</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/02/password-authentication-using-python/\"><strong>Password Authentication using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/14/web-scraping-to-create-a-dataset-using-python/\"><strong>Web Scraping to create a\u00a0dataset</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/30/resume-scanner-using-python/\"><strong>Resume Scanner</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/22/merge-sort-using-python/\"><strong>Merge Sort Algorithm</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/26/pick-a-random-card-using-python/\"><strong>Pick a Random card using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/04/quartile-deviation-using-python/\"><strong>Quartile Deviation using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/12/count-character-occurrences-using-python/\"><strong>Count Character Occurrences</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/28/pyramid-pattern-using-python/\"><strong>Pyramid Pattern using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/10/sequential-search-using-python/\"><strong>Sequential Search</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/06/swap-variables-using-python/\"><strong>Swap Variables using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/14/sort-numpy-arrays-using-python/\"><strong>Sorting NumPy\u00a0Arrays</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/08/validate-anagrams-using-python/\"><strong>Validate Anagrams</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/18/create-tables-using-python/\"><strong>Create Tables with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/06/recursive-binary-search-using-python/\"><strong>Recursive Binary\u00a0Search</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/13/backward-for-loop-using-python/\"><strong>Backward For\u00a0Loop</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/18/dijkstras-algorithm-using-python/\"><strong>Dijkstra\u2019s Algorithm using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/04/hash-tables-using-python/\"><strong>Hash Tables using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/02/queues-using-python/\"><strong>Queues using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/01/validate-a-binary-search-tree-using-python/\"><strong>Validate a Binary Search\u00a0Tree</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/01/stacks-using-python/\"><strong>Stacks using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/23/palindrome-words-using-python/\"><strong>Check Palindrome Words</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/17/breadth-first-search-using-python/\"><strong>Breadth-First Search Algorithm</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/28/plotting-annotations-using-python/\"><strong>Plot Annotations</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/27/real-time-currency-converter-with-python/\"><strong>Real-Time Currency Converter</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/09/fizzbuzz-algorithm-using-c-and-python/\"><strong>FizzBuzz Algorithm</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/07/extract-keywords-using-python/\"><strong>Extract Keywords with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/02/read-data-from-google-sheets-using-python/\"><strong>Read Data From Google Sheets with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/29/create-an-invoice-with-python/\"><strong>Invoice Generator with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/15/text-based-adventure-game-with-python/\"><strong>Text-Based Adventure Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/14/mad-libs-game-with-python/\"><strong>Mad Libs Game with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/13/acronyms-using-python/\"><strong>Create Acronyms using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/13/alarm-clock-with-python/\"><strong>Alarm Clock with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/12/email-slicer-with-python/\"><strong>Email Slicer with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/11/story-generator-with-python/\"><strong>Story Generator with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/11/python-program-to-generate-password/\"><strong>Generate Password with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/10/rock-paper-and-scissors-game-with-python/\"><strong>Play Rock, Paper, and Scissors with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/10/dice-roll-simulator-with-python/\"><strong>Dice Roll Simulator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/09/qr-codes-with-python/\"><strong>QR Code Generator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/03/create-a-quiz-game-with-python/\"><strong>Animal Quiz\u00a0Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/23/print-colored-text-with-python/\"><strong>Print Coloured\u00a0Text</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/21/bmi-calculator-with-python/\"><strong>BMI Calculator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/11/30/convert-fahrenheit-to-celsius-with-python/\"><strong>Fahrenheit to Celcius Converter</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/08/multiple-inputs-with-python-using-while-loop/\"><strong>Taking Multiple User\u00a0Inputs</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/07/convert-roman-numbers-to-decimals-with-python/\"><strong>Convert Roman Numbers to\u00a0Decimals</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/11/pearson-correlation-using-python/\"><strong>Pearson Correlation</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/16/treemap-using-python/\"><strong>Treemap using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/08/convert-image-to-array-using-python/\"><strong>Convert Image to an\u00a0array</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/02/scrape-imdb-using-python/\"><strong>Scrape IMDb with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/13/python-projects-for-resume/\"><strong>Python Projects for\u00a0Resume</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/05/19/python-project-ideas-for-final-year/\"><strong>Python Project Ideas for Final\u00a0Year</strong></a></li>\n</ol>\n<h3>Advance Python Projects:</h3>\n<ol>\n<li><a href=\"https://thecleverprogrammer.com/2023/03/27/end-to-end-chatbot-using-python/\"><strong>End to End Chatbot with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2023/03/22/message-encryption-using-python/\"><strong>Message Encryption using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2023/01/11/distance-between-two-locations-using-python/\"><strong>Calculate Distance Between Two Locations</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/07/05/netflix-recommendation-system-using-python/\"><strong>Netflix Recommendation System</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/01/12/time-series-graph-using-python/\"><strong>Time Series Graph using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/12/21/get-stock-price-data-using-python/\"><strong>Get Stock Price Data using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/12/15/candlestick-chart-using-python/\"><strong>Candlestick Chart using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/11/11/word-cloud-from-a-pandas-dataframe-in-python/\"><strong>Word Cloud From a Pandas DataFrame</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/09/lenet-5-architecture-using-python/\"><strong>LeNet-5 Architecture using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/26/end-to-end-encryption-using-python/\"><strong>End-to-end Encryption using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/08/20/get-live-covid-19-data-using-python/\"><strong>Get Live Covid-19 Data using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/21/violin-plot-using-python/\"><strong>Violin Plot using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/05/sunburst-plot-using-python/\"><strong>Sunburst Plot with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/01/calculation-of-accuracy-using-python/\"><strong>Calculation of Accuracy using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/07/visualize-a-neural-network-using-python/\"><strong>Visualize a Neural Network using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/20/bias-and-variance-using-python/\"><strong>Bias and Variance using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/21/get-live-weather-updates-using-python/\"><strong>Get Live Weather Updates using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/11/count-objects-in-image-using-python/\"><strong>Count Objects in Image using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/10/scrape-trending-news-using-python/\"><strong>Scrape Trending News using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/01/real-time-stock-price-data-visualization-using-python/\"><strong>Real-time Stock Price Data Visualization using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/14/otp-verification-using-python/\"><strong>OTP Verification using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/17/data-visualization-on-map-using-python/\"><strong>Data Visualization on a\u00a0map</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/20/choropleth-map-using-python/\"><strong>Choropleth Map with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/23/egg-catcher-game-using-python/\"><strong>Egg catcher\u00a0game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/12/countryinfo-in-python-tutorial/\"><strong>Extract Country\u00a0Details</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/17/convert-text-into-numerical-data-using-python/\"><strong>Convert Text to Numerical data</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/07/auc-and-roc-curve-using-python/\"><strong>AUC and ROC using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/02/language-translator-using-python/\"><strong>Interactive Language Translator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/24/find-maximum-profit-using-python/\"><strong>Maximum Profit\u00a0Finder</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/04/language-detection-with-python/\"><strong>Language Detection</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/30/histogram-and-density-plots-using-python/\"><strong>Histogram and Density Plots with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/06/radar-plot-using-python/\"><strong>Radar Plot with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/25/chatbot-using-python/\"><strong>Create a Chatbot with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/28/remove-stop-words-using-python/\"><strong>Stopwords Removal</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/29/remove-unicode-characters-using-python/\"><strong>Unicode Characters Removal</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/16/grammar-correction-using-python/\"><strong>Grammar Correction with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/05/caterpillar-game-with-python/\"><strong>Caterpillar Game with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/26/maze-solver-with-python/\"><strong>Maze Solver</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/25/encrypt-and-decrypt-using-python/\"><strong>Encrypt and Decrypt Messages with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/24/screen-pet-with-python/\"><strong>Screen Pet Game with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/23/build-a-robot-with-python/\"><strong>Robot Builder with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/19/word-cloud-with-python-tutorial/\"><strong>Generate Word\u00a0Clouds</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/18/bitcoin-mining-with-python/\"><strong>Bitcoin Mining</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/17/password-picker-with-python/\"><strong>Password Picker</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/17/typing-speed-test-gui-with-python/\"><strong>Typing Test Game\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/16/contact-book-with-python/\"><strong>Contact Book with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/15/hangman-game-with-python/\"><strong>Hangman Game with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/15/url-shortener-with-python/\"><strong>URL Shortner with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/09/digital-clock-with-python/\"><strong>Digital Clock\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/07/desktop-notification-with-python/\"><strong>Get Desktop Notifications with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/05/use-phone-camera-with-python/\"><strong>Use Your Phone Camera for Computer\u00a0Vision</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/27/music-player-gui-with-python/\"><strong>Music Player\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/25/game-of-life-with-python/\"><strong>Game of Life with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/25/extract-text-from-videos-using-python/\"><strong>Extract Text from\u00a0videos</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/23/create-a-game-with-python/\"><strong>Fidget Spinner\u00a0Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/18/spelling-correction-with-python/\"><strong>Spelling Correction with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/10/turtle-graphics-with-python/\"><strong>Create Amazing Graphics with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/09/monty-hall-problem-with-python/\"><strong>Monty Hall Simulator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/08/video-to-audio-converter-with-python/\"><strong>Video to Audio Converter</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/06/tic-tac-toe-gui-with-python/\"><strong>Tic Tac Toe\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/05/calculator-gui-with-python/\"><strong>Calculator GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/04/number-guessing-game-with-python-and-c/\"><strong>Number Guessing\u00a0Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/02/image-converter-gui-with-python/\"><strong>Image Converter GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/11/28/weight-converter-gui-with-python/\"><strong>Weight Converter GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/11/27/chessboard-with-python/\"><strong>Visualize a Chess Board with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/29/age-and-gender-detection-with-python/\"><strong>Age and Gender Detection</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/23/barcode-and-qr-code-reader-with-python/\"><strong>Bar Code and QR Code\u00a0Reader</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/22/create-an-audiobook-with-python/\"><strong>Create Audiobook with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/09/face-detection-with-python/\"><strong>Face Detection</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/06/extract-text-from-pdf-using-python/\"><strong>Extract Text from\u00a0PDF</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/04/card-game-with-python/\"><strong>Card Game using DS and\u00a0Algo</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/01/web-scraper-with-python/\"><strong>Web Scrapper with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/30/pencil-sketch-with-python/\"><strong>Create a Pencil Sketch using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/25/text-editor-gui-with-python/\"><strong>Text Editor\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/24/instagram-filters-with-python/\"><strong>Instagram Filters with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/18/count-rainy-days-with-python/\"><strong>Count Number of Rainy days in a\u00a0year</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/15/send-emails-with-python/\"><strong>Send Emails with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/01/image-segmentation-with-python/\"><strong>Image Segmentation</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/28/quicksort-using-python/\"><strong>Quick Sort Algorithm</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/21/deploy-a-chatbot-with-python/\"><strong>Deploy a\u00a0Chatbot</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/18/telegram-bot-with-python/\"><strong>Create a Telegram\u00a0Bot</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/17/scraping-twitter-with-python/\"><strong>Scraping Twitter without\u00a0API</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/16/text-to-speech-with-python/\"><strong>Text to Speech Converter</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/14/keyword-research-with-python/\"><strong>Keyword Research with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/19/next-word-prediction-with-python/\"><strong>Next Word Prediction</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/10/scrape-wikipedia-with-python/\"><strong>Scrape Wikipedia</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/22/lives-game-with-python/\"><strong>Lives Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/08/web-scraping-to-create-csv/\"><strong>Web Scraping to create a\u00a0CSV</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/07/30/scraping-instagram-with-python/\"><strong>Scrape Instagram</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/07/25/image-filtering-with-machine-learning/\"><strong>Image Filtering</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/07/22/audio-processing-with-python/\"><strong>Audio Processing</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/05/19/analog-clock-with-python/\"><strong>Analog Clock with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/05/17/build-your-own-chatbot-with-python/\"><strong>Create a Simple\u00a0Chatbot</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/05/10/python-clock-app-with-kivy/\"><strong>Clock APP with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/05/02/3d-graphs-with-matplotlib/\"><strong>3D Graphs</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/04/23/python-gui-app-for-calendar/\"><strong>Calendar GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/14/real-time-weather-with-python/\"><strong>Get Real-time weather with\u00a0Python</strong></a></li>\n</ol>\n<p>So these were some of the best Python projects with source code that you should\u00a0try.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=692f8775b0ca\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>190 Python Projects with Source Code: solved and explained for\u00a0free</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/1*Jdl3SYLIpoMy1Xt4Q9afJQ.png\"></figure><p>Python is one of the best programming languages. Due to its readability and beginner-friendly nature, it has been accepted by industries around the world. So to master Python for any field you have to work on projects. In this article, I will take you through more than 190 Python projects with source\u00a0code.</p>\n<h3>Python Projects with Source\u00a0Code</h3>\n<h3>Python Projects For Beginners:</h3>\n<ol>\n<li><a href=\"https://thecleverprogrammer.com/2022/06/29/number-guessing-game-using-python/\"><strong>Number Guessing\u00a0Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/05/26/group-anagrams-using-python/\"><strong>Group Anagrams using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/07/13/find-missing-number-using-python/\"><strong>Find Missing\u00a0Number</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/07/06/group-elements-of-same-indices-using-python/\"><strong>Group Elements of Same\u00a0Indices</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/03/31/mean-median-and-mode-using-python/\"><strong>Calculate Mean, Median, and Mode using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/02/10/execution-time-of-a-python-program/\"><strong>Calculate Execution Time of a Python\u00a0Program</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/06/22/count-number-of-words-in-a-column-using-python/\"><strong>Count Number of words in a\u00a0Column</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/05/12/rock-paper-scissors-game-using-python/\"><strong>Rock Paper Scissors Game using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/06/15/print-emojis-using-python/\"><strong>Print Emojis using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/06/01/correct-spellings-using-python/\"><strong>Correct Spellings using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/05/05/scraping-github-profile-using-python/\"><strong>Scraping Github Profile using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/04/07/visualize-linear-relationship-using-python/\"><strong>Visualize Linear Relationships using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/04/28/generate-text-using-python/\"><strong>Generate Text using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/03/10/scrape-table-from-a-website-using-python/\"><strong>Scrape Table From a Website using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/04/14/extract-text-from-pdf-with-python/\"><strong>Extract Text From PDF using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/03/17/reverse-a-string-using-python/\"><strong>Reversing a String using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/03/03/sequencematcher-in-python/\"><strong>Match Sequences using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/01/11/qr-code-using-python/\"><strong>QR Code using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/01/18/decode-a-qr-code-using-python/\"><strong>Decode a QR Code using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/02/17/create-dummy-data-using-python/\"><strong>Creating Dummy Data using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/02/03/remove-cuss-words-using-python/\"><strong>Remove Cuss Words using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/01/27/find-duplicate-values-using-python/\"><strong>Find Duplicate Values using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/12/07/detect-questions-using-python/\"><strong>Detect Questions using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/31/voice-recorder-using-python/\"><strong>Voice Recorder using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/02/24/reading-and-writing-csv-files-using-python/\"><strong>Reading and Writing CSV Files using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/12/22/box-plot-using-python/\"><strong>Box Plot using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/11/05/send-instagram-messages-using-python/\"><strong>Send Instagram Messages using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/09/09/age-calculator-using-python/\"><strong>Age Calculator using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/09/23/lcm-using-python/\"><strong>LCM using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/09/14/price-elasticity-of-demand-using-python/\"><strong>Price Elasticity of Demand using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/08/30/python-program-to-count-most-frequent-words-in-a-file/\"><strong>Find the Most Frequent Words in a\u00a0File</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/08/25/python-program-to-count-capital-letters-in-a-file/\"><strong>Find the Number of Capital Letters in a\u00a0File</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/11/16/index-of-maximum-value-in-a-python-list/\"><strong>Index of Maximum Value in a Python\u00a0List</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/08/index-of-minimum-value-in-a-python-list/\"><strong>Index of Minimum Value in a Python\u00a0List</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/31/voice-recorder-using-python/\"><strong>Voice Recorder using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/11/05/send-instagram-messages-using-python/\"><strong>Send Instagram Messages using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/23/animated-scatter-plot-using-python/\"><strong>Animated Scatter\u00a0Plot</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/20/create-font-art-using-python/\"><strong>Create Font Art using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/31/collage-maker-using-python/\"><strong>Collage Maker with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/08/05/phone-number-details-using-python/\"><strong>Get Phone Number Details using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/02/print-a-calendar-using-python/\"><strong>Display a Calendar using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/23/internet-speed-test-using-python/\"><strong>Internet Speed Test using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/26/text-to-handwriting-using-python/\"><strong>Text to Handwriting with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/29/shutdown-computer-using-python/\"><strong>Shutdown Computer using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/11/send-automatic-emails-using-python/\"><strong>Send Automatic Emails using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/22/defang-ip-address-using-python/\"><strong>Defang IP\u00a0Address</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/02/password-authentication-using-python/\"><strong>Password Authentication using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/14/web-scraping-to-create-a-dataset-using-python/\"><strong>Web Scraping to create a\u00a0dataset</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/30/resume-scanner-using-python/\"><strong>Resume Scanner</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/22/merge-sort-using-python/\"><strong>Merge Sort Algorithm</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/26/pick-a-random-card-using-python/\"><strong>Pick a Random card using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/04/quartile-deviation-using-python/\"><strong>Quartile Deviation using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/12/count-character-occurrences-using-python/\"><strong>Count Character Occurrences</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/28/pyramid-pattern-using-python/\"><strong>Pyramid Pattern using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/10/sequential-search-using-python/\"><strong>Sequential Search</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/06/swap-variables-using-python/\"><strong>Swap Variables using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/14/sort-numpy-arrays-using-python/\"><strong>Sorting NumPy\u00a0Arrays</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/08/validate-anagrams-using-python/\"><strong>Validate Anagrams</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/18/create-tables-using-python/\"><strong>Create Tables with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/06/recursive-binary-search-using-python/\"><strong>Recursive Binary\u00a0Search</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/13/backward-for-loop-using-python/\"><strong>Backward For\u00a0Loop</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/18/dijkstras-algorithm-using-python/\"><strong>Dijkstra\u2019s Algorithm using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/04/hash-tables-using-python/\"><strong>Hash Tables using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/02/queues-using-python/\"><strong>Queues using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/01/validate-a-binary-search-tree-using-python/\"><strong>Validate a Binary Search\u00a0Tree</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/01/stacks-using-python/\"><strong>Stacks using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/23/palindrome-words-using-python/\"><strong>Check Palindrome Words</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/17/breadth-first-search-using-python/\"><strong>Breadth-First Search Algorithm</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/28/plotting-annotations-using-python/\"><strong>Plot Annotations</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/27/real-time-currency-converter-with-python/\"><strong>Real-Time Currency Converter</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/09/fizzbuzz-algorithm-using-c-and-python/\"><strong>FizzBuzz Algorithm</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/07/extract-keywords-using-python/\"><strong>Extract Keywords with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/02/read-data-from-google-sheets-using-python/\"><strong>Read Data From Google Sheets with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/29/create-an-invoice-with-python/\"><strong>Invoice Generator with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/15/text-based-adventure-game-with-python/\"><strong>Text-Based Adventure Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/14/mad-libs-game-with-python/\"><strong>Mad Libs Game with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/13/acronyms-using-python/\"><strong>Create Acronyms using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/13/alarm-clock-with-python/\"><strong>Alarm Clock with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/12/email-slicer-with-python/\"><strong>Email Slicer with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/11/story-generator-with-python/\"><strong>Story Generator with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/11/python-program-to-generate-password/\"><strong>Generate Password with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/10/rock-paper-and-scissors-game-with-python/\"><strong>Play Rock, Paper, and Scissors with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/10/dice-roll-simulator-with-python/\"><strong>Dice Roll Simulator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/09/qr-codes-with-python/\"><strong>QR Code Generator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/03/create-a-quiz-game-with-python/\"><strong>Animal Quiz\u00a0Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/23/print-colored-text-with-python/\"><strong>Print Coloured\u00a0Text</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/21/bmi-calculator-with-python/\"><strong>BMI Calculator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/11/30/convert-fahrenheit-to-celsius-with-python/\"><strong>Fahrenheit to Celcius Converter</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/08/multiple-inputs-with-python-using-while-loop/\"><strong>Taking Multiple User\u00a0Inputs</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/07/convert-roman-numbers-to-decimals-with-python/\"><strong>Convert Roman Numbers to\u00a0Decimals</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/11/pearson-correlation-using-python/\"><strong>Pearson Correlation</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/16/treemap-using-python/\"><strong>Treemap using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/08/convert-image-to-array-using-python/\"><strong>Convert Image to an\u00a0array</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/02/scrape-imdb-using-python/\"><strong>Scrape IMDb with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/13/python-projects-for-resume/\"><strong>Python Projects for\u00a0Resume</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/05/19/python-project-ideas-for-final-year/\"><strong>Python Project Ideas for Final\u00a0Year</strong></a></li>\n</ol>\n<h3>Advance Python Projects:</h3>\n<ol>\n<li><a href=\"https://thecleverprogrammer.com/2023/03/27/end-to-end-chatbot-using-python/\"><strong>End to End Chatbot with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2023/03/22/message-encryption-using-python/\"><strong>Message Encryption using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2023/01/11/distance-between-two-locations-using-python/\"><strong>Calculate Distance Between Two Locations</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/07/05/netflix-recommendation-system-using-python/\"><strong>Netflix Recommendation System</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2022/01/12/time-series-graph-using-python/\"><strong>Time Series Graph using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/12/21/get-stock-price-data-using-python/\"><strong>Get Stock Price Data using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/12/15/candlestick-chart-using-python/\"><strong>Candlestick Chart using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/11/11/word-cloud-from-a-pandas-dataframe-in-python/\"><strong>Word Cloud From a Pandas DataFrame</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/10/09/lenet-5-architecture-using-python/\"><strong>LeNet-5 Architecture using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/26/end-to-end-encryption-using-python/\"><strong>End-to-end Encryption using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/08/20/get-live-covid-19-data-using-python/\"><strong>Get Live Covid-19 Data using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/21/violin-plot-using-python/\"><strong>Violin Plot using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/05/sunburst-plot-using-python/\"><strong>Sunburst Plot with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/01/calculation-of-accuracy-using-python/\"><strong>Calculation of Accuracy using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/06/07/visualize-a-neural-network-using-python/\"><strong>Visualize a Neural Network using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/20/bias-and-variance-using-python/\"><strong>Bias and Variance using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/21/get-live-weather-updates-using-python/\"><strong>Get Live Weather Updates using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/11/count-objects-in-image-using-python/\"><strong>Count Objects in Image using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/10/scrape-trending-news-using-python/\"><strong>Scrape Trending News using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/05/01/real-time-stock-price-data-visualization-using-python/\"><strong>Real-time Stock Price Data Visualization using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/14/otp-verification-using-python/\"><strong>OTP Verification using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/07/17/data-visualization-on-map-using-python/\"><strong>Data Visualization on a\u00a0map</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/20/choropleth-map-using-python/\"><strong>Choropleth Map with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/23/egg-catcher-game-using-python/\"><strong>Egg catcher\u00a0game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/12/countryinfo-in-python-tutorial/\"><strong>Extract Country\u00a0Details</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/17/convert-text-into-numerical-data-using-python/\"><strong>Convert Text to Numerical data</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/07/auc-and-roc-curve-using-python/\"><strong>AUC and ROC using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/02/language-translator-using-python/\"><strong>Interactive Language Translator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/24/find-maximum-profit-using-python/\"><strong>Maximum Profit\u00a0Finder</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/04/language-detection-with-python/\"><strong>Language Detection</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/30/histogram-and-density-plots-using-python/\"><strong>Histogram and Density Plots with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/04/06/radar-plot-using-python/\"><strong>Radar Plot with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/25/chatbot-using-python/\"><strong>Create a Chatbot with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/28/remove-stop-words-using-python/\"><strong>Stopwords Removal</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/29/remove-unicode-characters-using-python/\"><strong>Unicode Characters Removal</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/03/16/grammar-correction-using-python/\"><strong>Grammar Correction with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/02/05/caterpillar-game-with-python/\"><strong>Caterpillar Game with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/26/maze-solver-with-python/\"><strong>Maze Solver</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/25/encrypt-and-decrypt-using-python/\"><strong>Encrypt and Decrypt Messages with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/24/screen-pet-with-python/\"><strong>Screen Pet Game with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/23/build-a-robot-with-python/\"><strong>Robot Builder with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/19/word-cloud-with-python-tutorial/\"><strong>Generate Word\u00a0Clouds</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/18/bitcoin-mining-with-python/\"><strong>Bitcoin Mining</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/17/password-picker-with-python/\"><strong>Password Picker</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/17/typing-speed-test-gui-with-python/\"><strong>Typing Test Game\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/16/contact-book-with-python/\"><strong>Contact Book with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/15/hangman-game-with-python/\"><strong>Hangman Game with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/15/url-shortener-with-python/\"><strong>URL Shortner with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/09/digital-clock-with-python/\"><strong>Digital Clock\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/07/desktop-notification-with-python/\"><strong>Get Desktop Notifications with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/05/use-phone-camera-with-python/\"><strong>Use Your Phone Camera for Computer\u00a0Vision</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/27/music-player-gui-with-python/\"><strong>Music Player\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/25/game-of-life-with-python/\"><strong>Game of Life with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/25/extract-text-from-videos-using-python/\"><strong>Extract Text from\u00a0videos</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/23/create-a-game-with-python/\"><strong>Fidget Spinner\u00a0Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/18/spelling-correction-with-python/\"><strong>Spelling Correction with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/10/turtle-graphics-with-python/\"><strong>Create Amazing Graphics with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/09/monty-hall-problem-with-python/\"><strong>Monty Hall Simulator</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/08/video-to-audio-converter-with-python/\"><strong>Video to Audio Converter</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/06/tic-tac-toe-gui-with-python/\"><strong>Tic Tac Toe\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/05/calculator-gui-with-python/\"><strong>Calculator GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/04/number-guessing-game-with-python-and-c/\"><strong>Number Guessing\u00a0Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/12/02/image-converter-gui-with-python/\"><strong>Image Converter GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/11/28/weight-converter-gui-with-python/\"><strong>Weight Converter GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/11/27/chessboard-with-python/\"><strong>Visualize a Chess Board with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/29/age-and-gender-detection-with-python/\"><strong>Age and Gender Detection</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/23/barcode-and-qr-code-reader-with-python/\"><strong>Bar Code and QR Code\u00a0Reader</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/22/create-an-audiobook-with-python/\"><strong>Create Audiobook with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/09/face-detection-with-python/\"><strong>Face Detection</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/06/extract-text-from-pdf-using-python/\"><strong>Extract Text from\u00a0PDF</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/04/card-game-with-python/\"><strong>Card Game using DS and\u00a0Algo</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/10/01/web-scraper-with-python/\"><strong>Web Scrapper with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/30/pencil-sketch-with-python/\"><strong>Create a Pencil Sketch using\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/25/text-editor-gui-with-python/\"><strong>Text Editor\u00a0GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/24/instagram-filters-with-python/\"><strong>Instagram Filters with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/18/count-rainy-days-with-python/\"><strong>Count Number of Rainy days in a\u00a0year</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/15/send-emails-with-python/\"><strong>Send Emails with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/09/01/image-segmentation-with-python/\"><strong>Image Segmentation</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/28/quicksort-using-python/\"><strong>Quick Sort Algorithm</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/21/deploy-a-chatbot-with-python/\"><strong>Deploy a\u00a0Chatbot</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/18/telegram-bot-with-python/\"><strong>Create a Telegram\u00a0Bot</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/17/scraping-twitter-with-python/\"><strong>Scraping Twitter without\u00a0API</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/16/text-to-speech-with-python/\"><strong>Text to Speech Converter</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/14/keyword-research-with-python/\"><strong>Keyword Research with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/19/next-word-prediction-with-python/\"><strong>Next Word Prediction</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/10/scrape-wikipedia-with-python/\"><strong>Scrape Wikipedia</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/22/lives-game-with-python/\"><strong>Lives Game</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/08/08/web-scraping-to-create-csv/\"><strong>Web Scraping to create a\u00a0CSV</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/07/30/scraping-instagram-with-python/\"><strong>Scrape Instagram</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/07/25/image-filtering-with-machine-learning/\"><strong>Image Filtering</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/07/22/audio-processing-with-python/\"><strong>Audio Processing</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/05/19/analog-clock-with-python/\"><strong>Analog Clock with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/05/17/build-your-own-chatbot-with-python/\"><strong>Create a Simple\u00a0Chatbot</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/05/10/python-clock-app-with-kivy/\"><strong>Clock APP with\u00a0Python</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/05/02/3d-graphs-with-matplotlib/\"><strong>3D Graphs</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2020/04/23/python-gui-app-for-calendar/\"><strong>Calendar GUI</strong></a></li>\n<li><a href=\"https://thecleverprogrammer.com/2021/01/14/real-time-weather-with-python/\"><strong>Get Real-time weather with\u00a0Python</strong></a></li>\n</ol>\n<p>So these were some of the best Python projects with source code that you should\u00a0try.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=692f8775b0ca\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["machine-learning","data-science","artificial-intelligence","python","programming"]},{"title":"Avoiding Common Mistakes with useEffect in ReactJS","pubDate":"2024-03-23 07:27:15","link":"https://afzalimdad9.medium.com/avoiding-common-mistakes-with-useeffect-in-reactjs-700df6d51a56?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/700df6d51a56","author":"Afzal Imdad","thumbnail":"","description":"\n<p>ReactJS is a popular JavaScript library for building user interfaces, and the useEffect hook is a critical part of its functionality. useEffect allows you to perform side effects in functional components, such as fetching data or updating the DOM. However, it can be easy to make mistakes when using useEffect, which can lead to bugs and performance issues. In this blog post, we will explore some of the common mistakes that people make when using useEffect and how to use it correctly.</p>\n<p><strong>01. Not Specifying Dependencies</strong></p>\n<p>One of the most common mistakes with useEffect is not specifying its dependencies. useEffect runs every time a component is rendered, so it is important to specify which values should trigger a re-render. If you don\u2019t specify dependencies, your useEffect function could be called unnecessarily, leading to performance issues.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*FnYTBzANxoAk3pFs.png\"></figure><p>In this example, we have a counter that updates the document title every time it is clicked. However, we have not specified any dependencies in the useEffect hook. This means that the useEffect function will run every time the component is re-rendered, even if the count has not changed. To fix this, we should include the `count` variable as a dependency:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*ZqHlq9dC_OFlJAyQ.png\"></figure><p>Now, the useEffect function will only run when the count variable\u00a0changes.</p>\n<p><strong>02. Using setState in useEffect Without a Dependency</strong></p>\n<p>Another common mistake is using setState in useEffect without a dependency. When you update the state in useEffect, it can trigger another render, which can cause an infinite loop. To avoid this issue, you should always include the state variable that you\u2019re updating as a dependency in your useEffect hook.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*RsjT_Fxz29qQHKeH.png\"></figure><p>In this example, we are updating the count state variable in the useEffect hook without including it as a dependency. This will cause the useEffect function to run every time the component is re-rendered, leading to an infinite loop. To fix this, we should include count as a dependency:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*w0YPj1_dXybjzC82.png\"></figure><p>Now, the useEffect function will only run when the count variable\u00a0changes.</p>\n<p>But wait, didn\u2019t you identify there is an issue with this??? Yes, this will also lead to an infinite loop when click the button. <strong><em>So keep in mind to don\u2019t use the same state as dependency and don\u2019t update that state inside the useEffect</em></strong>.</p>\n<p><strong>03. Forgetting to Clean\u00a0Up</strong></p>\n<p>Another common mistake is not cleaning up after the useEffect hook. useEffect can return a cleanup function that runs when the component is unmounted. This is useful for cleaning up timers, event listeners, or other resources that are no longer needed. If you don\u2019t clean up after useEffect, it can lead to memory leaks and other\u00a0issues.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*zdDJOyEqkr5sE_TW.png\"></figure><p>In this example, we are using setInterval to update the count state variable every second. However, we are not cleaning up after the component is unmounted, which could lead to memory leaks. To fix this, we can return a function from the useEffect hook that clears the interval:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*Gvu_QRnxHDeE5S1K.png\"></figure><p>Now, the interval will be cleared when the component is unmounted.</p>\n<p>In conclusion, we have discussed some of the common mistakes that people make when using useEffect in ReactJS. By specifying dependencies, including state variables as dependencies when using setState in useEffect, and cleaning up after your useEffect function, you can avoid these issues and ensure that your components are performing optimally.</p>\n<p>Happy coding!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=700df6d51a56\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>ReactJS is a popular JavaScript library for building user interfaces, and the useEffect hook is a critical part of its functionality. useEffect allows you to perform side effects in functional components, such as fetching data or updating the DOM. However, it can be easy to make mistakes when using useEffect, which can lead to bugs and performance issues. In this blog post, we will explore some of the common mistakes that people make when using useEffect and how to use it correctly.</p>\n<p><strong>01. Not Specifying Dependencies</strong></p>\n<p>One of the most common mistakes with useEffect is not specifying its dependencies. useEffect runs every time a component is rendered, so it is important to specify which values should trigger a re-render. If you don\u2019t specify dependencies, your useEffect function could be called unnecessarily, leading to performance issues.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*FnYTBzANxoAk3pFs.png\"></figure><p>In this example, we have a counter that updates the document title every time it is clicked. However, we have not specified any dependencies in the useEffect hook. This means that the useEffect function will run every time the component is re-rendered, even if the count has not changed. To fix this, we should include the `count` variable as a dependency:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*ZqHlq9dC_OFlJAyQ.png\"></figure><p>Now, the useEffect function will only run when the count variable\u00a0changes.</p>\n<p><strong>02. Using setState in useEffect Without a Dependency</strong></p>\n<p>Another common mistake is using setState in useEffect without a dependency. When you update the state in useEffect, it can trigger another render, which can cause an infinite loop. To avoid this issue, you should always include the state variable that you\u2019re updating as a dependency in your useEffect hook.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*RsjT_Fxz29qQHKeH.png\"></figure><p>In this example, we are updating the count state variable in the useEffect hook without including it as a dependency. This will cause the useEffect function to run every time the component is re-rendered, leading to an infinite loop. To fix this, we should include count as a dependency:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*w0YPj1_dXybjzC82.png\"></figure><p>Now, the useEffect function will only run when the count variable\u00a0changes.</p>\n<p>But wait, didn\u2019t you identify there is an issue with this??? Yes, this will also lead to an infinite loop when click the button. <strong><em>So keep in mind to don\u2019t use the same state as dependency and don\u2019t update that state inside the useEffect</em></strong>.</p>\n<p><strong>03. Forgetting to Clean\u00a0Up</strong></p>\n<p>Another common mistake is not cleaning up after the useEffect hook. useEffect can return a cleanup function that runs when the component is unmounted. This is useful for cleaning up timers, event listeners, or other resources that are no longer needed. If you don\u2019t clean up after useEffect, it can lead to memory leaks and other\u00a0issues.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*zdDJOyEqkr5sE_TW.png\"></figure><p>In this example, we are using setInterval to update the count state variable every second. However, we are not cleaning up after the component is unmounted, which could lead to memory leaks. To fix this, we can return a function from the useEffect hook that clears the interval:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*Gvu_QRnxHDeE5S1K.png\"></figure><p>Now, the interval will be cleared when the component is unmounted.</p>\n<p>In conclusion, we have discussed some of the common mistakes that people make when using useEffect in ReactJS. By specifying dependencies, including state variables as dependencies when using setState in useEffect, and cleaning up after your useEffect function, you can avoid these issues and ensure that your components are performing optimally.</p>\n<p>Happy coding!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=700df6d51a56\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["react-hook","reactjs","javascript","react","frontend"]},{"title":"Unleashing the Speed: Exploring the Power of Bun.js and the Future of JavaScript Runtimes","pubDate":"2024-03-23 07:18:53","link":"https://afzalimdad9.medium.com/unleashing-the-speed-exploring-the-power-of-bun-js-and-the-future-of-javascript-runtimes-eefe03088af4?source=rss-7bf9860d1ca1------2","guid":"https://medium.com/p/eefe03088af4","author":"Afzal Imdad","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*zDnq5mgggsRCMFJb\"></figure><p>It\u2019s no secret that JavaScript developers love to reinvent the wheel. We spend countless hours building libraries and frameworks for tasks that have already been solved by existing solutions. But it seems that some developers have taken this trend to the next level and have decided to reinvent the entire runtime\u00a0itself.</p>\n<p><a href=\"https://bun.sh/\">Bun.js</a>, is a new and ambitious JavaScript toolset and runtime that has been making waves in the tech world. It promises to be incredibly fast and is being touted by some as a Node.js killer. In this article, we will explore what Bun is, how it works, and whether it really is as fast as people claim. We\u2019ll also compare it with Node.js and see if it can truly replace it as the go-to JavaScript runtime. Let\u2019s dive\u00a0in!</p>\n<h3>Introduction: The\u00a0Basics</h3>\n<blockquote><em>Development of JavaScript Frameworks Over\u00a0Time</em></blockquote>\n<p>JavaScript was invented by Brendan Eich in 1995 for Netscape 2, and it became the ECMA-262 standard in 1997. With the emergence of Web 2.0 applications such as Gmail, JavaScript became a more serious language. Over time, JS engines in major browsers started providing better support and performance.</p>\n<p>Some notable advancements in the evolution of JS and its tools\u00a0include:</p>\n<ul>\n<li>The release of Node.js in 2009, which uses the V8 engine (Chrome V8), is considered one of the best JS engines to\u00a0date.</li>\n<li>The introduction of Webpack in 2012 to solve bundling issues for large projects.</li>\n<li>The emergence of polyfills and the introduction of Babel in 2014 to solve browser compatibility issues. Polyfills are now obsolete in\u00a02023.</li>\n</ul>\n<p>The original presentation</p>\n<blockquote><em>JavaScript Runtimes: Understanding Runtimes and their\u00a0Basics</em></blockquote>\n<p>Before we dive deeper into JavaScript runtimes, let\u2019s first understand what a <strong>runtime</strong> is. <strong>In programming, a runtime is an environment where the code runs and is executed.</strong> It includes everything that is needed to execute the code, such as libraries, frameworks, and\u00a0tools.</p>\n<p>A JavaScript runtime specifically is an environment where JavaScript code is executed. There are various JavaScript runtimes available in the market today. The most popular one is <strong>Node.js</strong>, which we will discuss in more detail\u00a0later.</p>\n<p>Let\u2019s take an\u00a0example:</p>\n<p><strong>JavaScript code is like fuel, which is used to power the car.</strong> Just like fuel, JavaScript code is inert and cannot do anything on its own. It needs something to process and execute\u00a0it.</p>\n<p>That\u2019s where the runtime environment comes in, which is like the engine of the car. <strong>The runtime environment takes the JavaScript code, processes it, and generates machine code that can be executed by the computer.</strong></p>\n<p>Here are a few things to keep in\u00a0mind:</p>\n<ul>\n<li>The <strong>engine (runtime)</strong> is responsible for the conversion of fuel (JavaScript code) into <strong>raw energy (machine\u00a0code)</strong>.</li>\n<li>The <strong>engine (runtime)</strong> is not the only component required to make the <strong>car (Node.js)</strong> work. It needs other <strong>components (Node APIs)</strong> to perform various\u00a0tasks.</li>\n<li>The engine (runtime) can vary in its quality and efficiency, just like different car <strong>engines can have different power and fuel efficiency.</strong>\n</li>\n</ul>\n<p>To summarize, it\u2019s something like\u00a0this:</p>\n<pre>JavaScript code (fuel) -&gt; Runtime environment (engine) -&gt; Node.js APIs (car)</pre>\n<blockquote><em>What exactly is Node.js\u00a0then?</em></blockquote>\n<p>Overall, JavaScript code alone is not enough to build a functional application. It needs to be processed by a runtime environment like <a href=\"https://nodejs.org/\">Node.js</a> to generate machine code that can be executed by the computer.</p>\n<p><strong>Node.js is a popular JavaScript runtime built on </strong><a href=\"https://v8.dev/\"><strong>Chrome\u2019s V8 engine</strong></a><strong>. It provides a rich set of APIs that allow developers to build server-side applications using JavaScript.</strong> Some popular Node APIs\u00a0include:</p>\n<ul>\n<li>HTTP: Allows building web servers and\u00a0clients.</li>\n<li>File System: Provides APIs for interacting with the file\u00a0system.</li>\n<li>Process: Provides APIs for interacting with the current Node\u00a0process.</li>\n</ul>\n<p>In summary, a JavaScript runtime is an environment where JavaScript code is executed, and Node.js is one of the most popular JavaScript runtimes available today, providing a rich set of APIs for building server-side applications.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*r3db_p8ILfRb4hsc.png\"></figure><p><a href=\"https://litslink.com/blog/node-js-architecture-from-a-to-z\">Node.js Architecture From A to Z. Use Cases, Advantages, Big Players | LITSLINK\u00a0Blog</a></p>\n<blockquote>\n<em>What sets Deno apart from Node.js? A brief introduction to\u00a0</em><a href=\"https://deno.com/\"><em>Deno</em></a><em>.</em>\n</blockquote>\n<p>Deno is a JavaScript runtime environment that is built on top of V8, the same JavaScript engine that powers Google Chrome. <strong>Deno is designed to be a more secure and modern alternative to\u00a0Node.js.</strong></p>\n<p><a href=\"https://github.com/ry\">Ryan Dahl</a>, the creator of Node.js, <strong>has expressed regret about some of the design decisions he made when creating Node.js</strong>. In a 2018 talk at JSConf EU, he apologized for making <strong>Node.js too complex and difficult to use, and for not making it more\u00a0secure.</strong></p>\n<p><strong>Dahl also said that he believes Deno is a better JavaScript runtime than Node.js.</strong> Deno is a newer project that is still under development, but it has a number of features that Dahl believes make it superior to\u00a0Node.js.</p>\n<p>Here are some of the key new additions and improvements to\u00a0Deno:</p>\n<ul>\n<li>Running JavaScript code in a secure sandbox by\u00a0default</li>\n<li>Using URLs to import modules from any\u00a0location</li>\n<li>Supporting TypeScript out of the box without any configuration or extra\u00a0tools</li>\n<li>Using ECMAScript modules as the default module\u00a0system</li>\n<li>Providing a standard library with common utilities and Web\u00a0APIs</li>\n<li>Offering a built-in bundler, test runner, formatter, and\u00a0debugger</li>\n</ul>\n<h3>So what exactly is this \u2018Bun\u2019 we keep hearing\u00a0about?</h3>\n<p>Bun is the new kid on the block. It\u2019s a JavaScript runtime that\u2019s a direct competitor to Node and is still in development, but it\u2019s already managed to <strong>raise $7 million in\u00a0funding!</strong></p>\n<blockquote>\n<em>What makes Bun stand out from the crowd is its </em><strong><em>three </em></strong><em>major\u00a0goals:</em>\n</blockquote>\n<ul>\n<li>To execute JavaScript at a <strong>BLAZINGLY FAST SPEED</strong>\u00a0\ud83d\ude80</li>\n<li>To provide complete and lightning-fast tooling, including a <strong>bundler </strong>and <strong>package\u00a0manager</strong>\n</li>\n<li>Be a <strong>drop-in replacement</strong> for all existing Node\u00a0projects</li>\n</ul>\n<blockquote>\n<em>So how does Bun plan to achieve these goals even though it\u2019s still in the\u00a0</em><a href=\"https://oven.sh/\"><em>Oven</em></a><em>?</em>\n</blockquote>\n<ul>\n<li>\n<strong>Speed</strong>: Bun is built on top of the <a href=\"https://developer.apple.com/documentation/javascriptcore\"><strong>JavaScriptCore</strong></a><strong> </strong>engine, which is the same engine that powers Safari and iOS. This gives Bun a significant performance advantage over other JavaScript runtimes, such as Node.js and\u00a0Deno.</li>\n<li>\n<strong>Tooling</strong>: Bun comes with a built-in bundler, transpiler, and task runner. This means that you can use Bun to build, test, and deploy your JavaScript projects without having to install any additional tools.</li>\n<li>\n<strong>Compatibility</strong>: Bun is designed to be a drop-in replacement for Node.js. This means that you can use Bun to run existing Node.js projects without having to make any changes to your\u00a0code.</li>\n</ul>\n<p>Bun is still in development, but it\u2019s already shaping up to be a powerful new JavaScript runtime.</p>\n<blockquote><em>Here are some of the key features of\u00a0Bun:</em></blockquote>\n<ul>\n<li>\n<strong>Speed</strong>: Bun is <strong>significantly faster</strong> than Node.js and Deno, especially for large applications.</li>\n<li>\n<strong>Memory usage</strong>: Bun uses significantly <strong>less memory than Node.js</strong> and <a href=\"https://deno.com/\">Deno</a>, even for large applications.</li>\n<li>\n<strong>Ease of use</strong>: Bun is <strong>very easy to use</strong>, even for beginners. It has a simple API that is similar to\u00a0Node.js.</li>\n<li>\n<strong>Documentation</strong>: Bun is very <a href=\"https://bun.sh/docs\">well-documented</a>, so it is easy to find help if you need\u00a0it.</li>\n</ul>\n<blockquote>\n<em>How exactly does </em><a href=\"https://developer.apple.com/documentation/javascriptcore\"><em>JavaScriptCore</em></a><em> fit into\u00a0Bun?</em>\n</blockquote>\n<blockquote><em>JavaScriptCore is a JavaScript engine that is used by Safari, Apple\u2019s web\u00a0browser.</em></blockquote>\n<p>Bun uses JavaScriptCore (JSC) as its JavaScript engine, while Chromium uses <a href=\"https://v8.dev/\">V8</a>, Firefox uses <a href=\"https://spidermonkey.dev/\">SpiderMonkey</a>, and Microsoft used Chakra for Internet Explorer but now uses V8 for Edge while <a href=\"https://hermesengine.dev/\">Hermes</a> is used for React\u00a0Native.</p>\n<p>JSC is generally faster than V8, especially for large applications. This is because JSC is written in C++, while V8 is written in JavaScript. C++ is a compiled language, which means that it is converted to machine code before it is executed. This makes C++ code faster than JavaScript code, which is interpreted at\u00a0runtime.</p>\n<p><strong>Bun is built on top of JavaScriptCore, which gives it a number of advantages over other JavaScript runtimes, such as Node.js and\u00a0</strong><a href=\"https://deno.com/\"><strong>Deno</strong></a><strong>.</strong></p>\n<p>Here are some of the benefits of using JavaScriptCore in\u00a0Bun:</p>\n<ul>\n<li>\n<strong>JIT compilation</strong>: Just-In-Time (JIT) compilation is a technique that <strong>compiles JavaScript code to machine code at runtime</strong>. This makes the code run faster, especially for code that is executed frequently.</li>\n<li>\n<strong>Function inlining</strong>: Function inlining is a technique that replaces <strong>function calls with the actual code of the function</strong>. This makes the code run faster, because there is no overhead of calling a function.</li>\n<li>\n<strong>Dead code elimination</strong>: Dead code elimination is a technique that removes code that is never executed. <strong>This makes the code smaller and\u00a0faster.</strong>\n</li>\n<li>\n<strong>Portability</strong>: JavaScriptCore is a cross-platform engine, which means that <strong>Bun can be used on a variety of operating systems.</strong>\n</li>\n</ul>\n<p>Overall, JavaScriptCore is a great choice for a JavaScript engine, and it is one of the reasons why Bun is such a fast and efficient runtime.</p>\n<h3>Unpacking the Main Selling Point: Performance</h3>\n<blockquote><em>How blazingly-fast is\u00a0bun?</em></blockquote>\n<p>Bun is all about speed, and it\u2019s a <strong>key selling point</strong>. Built by <a href=\"https://twitter.com/jarredsumner\">Jarred Sumner</a>, a former frontend engineer at <a href=\"https://stripe.com/\">Stripe</a>, Bun is designed to run most of the world\u2019s JavaScript outside of browsers, bringing performance and complexity enhancements to your infrastructure, as well as better developer productivity through simpler tooling. According to Sumner, <strong>Bun processes about three times more HTTP requests per second than Node.js when rendering React server-side.</strong></p>\n<p><strong>It\u2019s also equipped with WebSocket, ReadableStream, and fetch, and it\u2019s a transpiler, so TypeScript and JSX work out of the\u00a0box.</strong></p>\n<p>Sumner was frustrated by how slow everything was in JavaScript, and he wanted to make it faster. He explored a number of languages to build Bun but ultimately landed on the relatively little-known <a href=\"https://ziglang.org/\"><strong>Zig</strong></a>, which helped him achieve Bun\u2019s impressive speed. Bun also implements Node.js\u2019 module resolution algorithm, which means that <strong>npm packages also work with\u00a0it.</strong></p>\n<p>Jarred Sumner took to Twitter to share some statistics demonstrating how Bun <strong>accelerates existing Node APIs such as websockets, readable streams, file read and write, SQLite, and other features</strong>. He then compares the performance of these features with other similar\u00a0tools:</p>\n<blockquote>\n<em>Bun can install npm packages for a simple Next.js app approximately </em><strong><em>20 times faster </em></strong><em>than Yarn and </em><strong><em>49 times faster</em></strong><em> than npm\u00a0install.</em>\n</blockquote>\n<blockquote><em>Bun\u2019s implementation of the WebSocket client achieves higher throughput than both the \u2018ws\u2019 npm package and Deno\u2019s WebSocket client</em></blockquote>\n<blockquote>\n<em>Bun is equipped with a high-performance</em><strong><em> SQLite\u00a0client</em></strong>\n</blockquote>\n<p>Additionally, Bun has official benchmarks that demonstrate its impressive performance:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/736/0*w1sqH3ULANO9uGNH.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/739/0*2gAWbXDOuO_WkAnN.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/731/0*muVfGE83XTFlEaJE.png\"></figure><p>Bun\u2019s official benchmarks in <a href=\"https://bun.sh/\">https://bun.sh</a></p>\n<p>To sum up, the numbers speak for themselves and Bun is a lightning-fast tool designed to run JavaScript outside of browsers, and it outperforms many other popular tools when it comes to speed and performance.</p>\n<blockquote><em>How is Bun\u00a0fast?</em></blockquote>\n<p>Bun\u2019s speed is a key selling point of the runtime, and it\u2019s no coincidence that it was designed to beat a slow iteration cycle. Founder Jarred Sumner was frustrated with the speed of the iteration cycle in Next.js while developing a game, leading him to experiment with different builders and transpilers. <strong>However, in the end, he developed a runtime that included both, providing faster iteration times.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*qmE7tpZ7hTQJ_C8u.png\"></figure><p><a href=\"https://github.com/ziglang/logo#ziggy-the-ziguana\">ziglang/logo: The official Zig programming language\u00a0logo</a></p>\n<p>One of the unique features of Bun is its use of Zig\u2019s \u201c<strong>comptime</strong>\u201d metaprogramming approach, which allows arbitrary code to be run at compile time. This approach helped Sumner write fast code, and it is an essential factor in Bun\u2019s high performance and some others\u00a0include:</p>\n<ul><li>\n<strong>Use of Zig</strong>: As the creators of Bun state, one of the reasons for its speed is that its core functionality is written in Zig.<strong> The choice to use Zig was based on its low-level control over memory and lack of hidden control flow, which make it much simpler to write fast software.</strong> By compiling to machine code, Zig allows Bun to execute code more quickly and with fewer resources than\u00a0Node.js.</li></ul>\n<h3><a href=\"https://ziglang.org/?source=post_page-----a689ff274952--------------------------------\">Home \u26a1 Zig Programming Language</a></h3>\n<h3><a href=\"https://ziglang.org/?source=post_page-----a689ff274952--------------------------------\">Zig is a general-purpose programming language and toolchain for maintaining robust, optimal and reusable software\u2026</a></h3>\n<p><a href=\"https://ziglang.org/?source=post_page-----a689ff274952--------------------------------\">ziglang.org</a></p>\n<ul>\n<li>\n<strong>Comptime metaprogramming</strong>: Comptime is a metaprogramming approach that allows Bun to run code at compile time. <strong>This helps to speed up parsing and other tasks, resulting in faster performance overall.</strong>\n</li>\n<li>\n<em>Bun uses comptime in the lexical analyzer, called the \u201clexer.\u201d The lexer is responsible for iterating through all of the text to determine if the current token is a valid identifier or a keyword. Because of comptime, Bun uses a bit-set that\u2019s generated at compile time, </em><strong><em>resulting in a 2% performance boost.</em></strong>\n</li>\n</ul>\n<p>In contrast, Node.js is built on top of JavaScript, which can lead to slower performance. <strong>While Node.js does use C++ for some APIs, a lot of the code is in JavaScript.</strong> This can result in performance issues when adding additional JavaScript on top of an already JavaScript-heavy codebase. B<strong>un\u2019s use of Zig/C++ for its lowest levels means that when using JavaScript in Bun, you\u2019re actually using purely Zig/C++ underneath, resulting in super-fast performance.</strong></p>\n<p>In summary, while both Node.js and Bun are useful tools, their approaches to performance differ. Node.js prioritizes ease of use and flexibility, while Bun is designed for speed and performance.</p>\n<h3>What else does Bun\u00a0offer?</h3>\n<p>Bun is an <strong>all-in-one runtime that includes everything</strong> you need, unlike Node, which requires additional tools like Webpack, Babel, Jest, and others. Bun also offers a cohesive and modern developer experience, with features such\u00a0as:</p>\n<ul>\n<li>\n<strong>TypeScript and JSX support out of the box:</strong> You don\u2019t need to install or configure any extra tools to use TypeScript and JSX in your bun.js projects.</li>\n<li>\n<strong>Built-in bundler, transpiler, test runner, and package manager:</strong> You <strong>don\u2019t need to use external tools like webpack, Babel, Jest, or npm</strong> to bundle, transpile, test, and install your JavaScript modules. Bun comes with everything you need to build JavaScript apps. Bun also supports<strong><em>\u00a0.wasm</em></strong> files for <strong>WebAssembly</strong>.</li>\n<li>\n<strong>Node.js and Web APIs compatibility:</strong> You can use hundreds of Node.js and Web APIs in your bun.js projects, such as <strong>fs, path, Buffer, fetch, WebSocket, ReadableStream</strong>, and more. Bun also supports most native Node modules thanks to its implementation of Node-API functions.</li>\n<li>\n<strong>Custom modules for additional functionality and performance:</strong> You can use some built-in modules that bun.js provides to access features that are not available in Node.js or Web APIs, such as <strong><em>bun:sqlite</em></strong> for a <strong>fast SQLite client</strong>, or <strong><em>bun:ffi</em></strong> for a <strong>low-overhead foreign function interface</strong>.</li>\n<li>\n<strong>Compatibility with npm packages and modules:</strong> Bun can find and load modules from the <strong><em>node_modules </em></strong>directory using Node\u2019s resolution algorithm.</li>\n<li>\n<strong>Support for both ESM and CommonJS modules:</strong> Bun can import and export modules using either syntax, but internally it uses ESM for better performance and compatibility.</li>\n<li>\n<strong>Automatic loading of environment variables from\u00a0<em>.env </em>files:</strong> Bun can read and use values from\u00a0.env files to configure your application or pass information to your\u00a0code.</li>\n</ul>\n<p>Bun aims to be a fast, modern, and versatile JavaScript runtime that can run your code anywhere: local, server, or edge. It offers performance and simplicity benefits for your infrastructure, as well as productivity and happiness benefits for your development workflow.</p>\n<blockquote><em>Popular projects supporting Bun</em></blockquote>\n<blockquote>\n<em>Introducing </em><a href=\"https://hono.dev/\"><em>HonoJS</em></a><em>: A Blazingly-fast \ud83d\ude80 Competitor to ExpressJS</em>\n</blockquote>\n<p><strong>HonoJS is a framework for building web applications and services with JavaScript. </strong>It is built on top of the Deno runtime environment, and it provides a number of features that make it easy to build scalable and efficient web applications.</p>\n<p>One of the benefits of HonoJS is that it is very easy to use. The framework provides a number of pre-built components that can be used to quickly and easily build web applications.<strong> For example, the framework provides a pre-built router that can be used to handle HTTP requests</strong>, and a pre-built template engine that can be used to render HTML templates.</p>\n<p>Another benefit of HonoJS is that it is very secure. The framework is designed to be secure by default, and it provides a number of features that can help to protect your web applications from attacks. <strong>For example, the framework provides a pre-built authentication system that can be used to authenticate users, and it provides a pre-built authorization system that can be used to control what users can do with your web applications.</strong></p>\n<p>Finally, HonoJS is very scalable.<strong> The framework is designed to be able to handle large volumes of traffic, and it provides a number of features that can help to improve the performance of your web applications.</strong> For example, the framework provides a pre-built caching system that can be used to cache frequently accessed data, and it provides a pre-built load balancer that can be used to distribute traffic across multiple\u00a0servers.</p>\n<p>Here are some of the benefits of <strong>HonoJS over\u00a0Express</strong>:</p>\n<ul>\n<li>\n<strong>HonoJS is built on top of the Deno runtime environment</strong>, which is a newer and more modern runtime than\u00a0Node.js.</li>\n<li>HonoJS is designed to be more secure than Express. <strong>It does not have access to the filesystem by default</strong>, and it only downloads modules from trusted\u00a0sources.</li>\n<li>HonoJS is designed to be more efficient than Express. <strong>It uses less memory and CPU resources</strong>, which can lead to better performance.</li>\n<li>HonoJS is designed to be <strong>more scalable than Express</strong>. It can handle more traffic and more users, which can make it a better choice for high-traffic applications.</li>\n<li>\n<strong>Bun is a supported runtime environment for HonoJS. This means that HonoJS can be used to build web applications and services on\u00a0Bun</strong>.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*EV0d5DI1fFDHcQBB.png\"></figure><p><a href=\"https://hono.dev/concepts/benchmarks\">Benchmarks\u200a\u2014\u200aHono</a></p>\n<h3><a href=\"https://hono.dev/getting-started/bun?source=post_page-----a689ff274952--------------------------------\">Bun\u200a\u2014\u200aHono</a></h3>\n<h3><a href=\"https://hono.dev/getting-started/bun?source=post_page-----a689ff274952--------------------------------\">Bun is another JavaScript runtime. It\u2019s not Node.js or Deno. Bun includes a trans compiler, we can write the code\u00a0with\u2026</a></h3>\n<p><a href=\"https://hono.dev/getting-started/bun?source=post_page-----a689ff274952--------------------------------\">hono.dev</a></p>\n<blockquote>\n<em>Introducing </em><a href=\"https://elysiajs.com/\"><em>E</em></a><em>lysia: A Blazingly-fast \ud83d\ude80 Competitor to Hono\u00a0\ud83d\ude09</em>\n</blockquote>\n<p>Elysia.js is a web framework built on top of the Bun runtime environment. It is designed to be fast, efficient, and easy to use. Elysia.js is a good choice for developers who want to build web applications that are scalable and\u00a0secure.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/572/0*EOBq0nBno6H1nFhX.png\"></figure><p>Elysia\u2019s benchmarks</p>\n<p>Here are some of the features of Elysia.js:</p>\n<ul>\n<li>\n<strong>Fully type-safe web framework:</strong> Elysia automatically infers the types from your code and validates the incoming requests to ensure type safety. You don\u2019t need to write types or understand TypeScript to use\u00a0Elysia.</li>\n<li>\n<strong>Optimized for Bun:</strong> Elysia leverages the speed and versatility of Bun, which uses JavaScriptCore as its core engine and can run on any platform that supports the Web Standard\u00a0API.</li>\n<li>\n<strong>Familiar syntax like Express:</strong> Elysia has a simple and expressive syntax that resembles Express, one of the most popular web frameworks for Node.js. You can easily create routes, middleware, and controllers with\u00a0Elysia.</li>\n<li>\n<strong>End-to-end type safety with Eden:</strong> Elysia integrates with Eden, a tool that allows you to create a <strong>fully type-safe client for consuming Elysia APIs</strong>. Eden creates a single source of truth for your data structure and eliminates any possible type conflict between TypeScript, actual requests, API documentation, and frontend\u00a0client.</li>\n<li>\n<strong>Documentation in one line with Swagger:</strong> Elysia supports Swagger plugins that can generate API documentation in just one line of code. You don\u2019t need to write any extra comments or annotations to document your APIs with\u00a0Elysia.</li>\n</ul>\n<p>\u2764\ufe0f</p>\n<h3><a href=\"https://elysiajs.com/?source=post_page-----a689ff274952--------------------------------\">Elysia\u200a\u2014\u200aFast, and friendly Bun web frameworks</a></h3>\n<h3>Trying out\u00a0Elysia:</h3>\n<h3><a href=\"https://github.com/vaishnav-mk/elysia-demo?source=post_page-----a689ff274952--------------------------------\">GitHub\u200a\u2014\u200avaishnav-mk/elysia-demo</a></h3>\n<h3><a href=\"https://github.com/vaishnav-mk/elysia-demo?source=post_page-----a689ff274952--------------------------------\">\ud83d\ude33 Demo app: Contact management with SvelteKit/Tailwind frontend &amp; ElysiaJS\u00a0backend</a></h3>\n<blockquote><em>The Backend with\u00a0Elysia</em></blockquote>\n<p>In this demo project, we have the <strong>backend implementation</strong> for a contact management app. The backend code is organized into two files: db.ts and index.ts.</p>\n<p>In db.ts, we define the ContactDB class which handles the database operations for contacts. It utilizes the bun:sqlite package for efficient SQLite database management. The class provides methods for creating, updating, deleting, and retrieving contacts from the database. It also supports searching for contacts based on a query\u00a0string.</p>\n<p>In index.ts, we set up the backend server using the Elysia framework. We leverage the power of Elysia's middleware ecosystem, including @elysiajs/cors for enabling CORS support and @elysiajs/swagger for generating API documentation. The server is configured to listen on port\u00a03000.</p>\n<p><strong>The Elysia framework brings several benefits to the table. It emphasizes efficiency and speed, thanks to its optimized design and use of advanced technologies. Compared to traditional frameworks like Express, Elysia outperforms in terms of handling requests and processing data, leading to better overall performance.</strong></p>\n<p>This demo project showcases the efficiency and speed of Elysia as a backend framework. By utilizing the ContactDB class and the Elysia framework, we can efficiently manage contacts, perform CRUD operations, and provide a robust API for the contact management app.</p>\n<p><strong>In summary, Elysia\u2019s backend implementation for the contact management app offers superior efficiency and speed compared to traditional frameworks like Express. Its optimized design, advanced features, and seamless integration with the ContactDB class make it a powerful choice for building efficient and performant backend applications.</strong></p>\n<blockquote><em>The Frontend with SvelteKit and\u00a0Tailwind</em></blockquote>\n<p>The frontend of this demo project is a sleek and intuitive contact management app built using <strong>SvelteKit and Tailwind CSS</strong>. It seamlessly interacts with the backend to provide a smooth user experience.</p>\n<p><a href=\"https://svelte.dev/\"><strong>SvelteKit</strong></a>, a modern frontend framework, is employed to develop the frontend. It leverages the concept of reactive programming, enabling efficient updates and rendering of the user interface. With SvelteKit, the contact management app benefits from faster loading times and reduced bundle size, resulting in improved performance.</p>\n<p><a href=\"https://tailwindcss.com/\"><strong>Tailwind CSS</strong></a>, a highly customizable CSS framework, is utilized for styling the frontend. It offers a utility-first approach, allowing for rapid development and easy customization. By leveraging Tailwind CSS, the contact management app achieves a visually appealing and responsive design.</p>\n<p>The frontend interacts with the backend through well-defined API endpoints provided by the Elysia backend. It utilizes HTTP requests to perform actions such as creating, updating, and deleting contacts, as well as retrieving contact information. These interactions are seamlessly integrated into the user interface, providing a smooth and intuitive user experience.</p>\n<p>Overall, the frontend of this demo project showcases the power and versatility of SvelteKit and Tailwind CSS. The combination of these technologies, along with the efficient backend implementation, results in a highly performant and user-friendly contact management app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*ECDznxrZXpmH_hlo.png\"></figure><h3>What the future of Bun\u00a0holds</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*pbQ7SlLRmqKhaP4w.png\"></figure><p>Bun.js has ignited a tidal wave of excitement in the JavaScript community. While still in its early stages and not yet production-ready, this revolutionary tool is captivating developers with its <strong>blazing-fast speed</strong> \ud83d\ude80, robust tooling, and relentless focus on web development.</p>\n<p>With a growing <a href=\"https://discord.com/invite/CXdq2DP29u\">Discord community</a> of over 16k members, the enthusiasm for Bun.js is palpable. It has quickly become a rallying point for JavaScript enthusiasts who eagerly anticipate its full potential. As Bun.js evolves and matures, it is poised to challenge established players and push the boundaries of what is possible in web application development.</p>\n<p><strong>This emerging powerhouse serves as a powerful motivator for existing players like Node.js and Deno to elevate their performance and stay competitive.</strong> The vibrant ecosystem surrounding Bun.js fosters a spirit of innovation and collaboration, inspiring developers to push the boundaries of what can be achieved.</p>\n<p>The future of Bun.js holds great promise. As it continues to evolve, it will empower JavaScript developers and reshape the web development landscape. Together, we are charting a new course towards a more efficient, productive, and exhilarating era of JavaScript development. <strong>Join the Bun.js community and be part of this exciting journey towards the future of web development.</strong></p>\n<h3><a href=\"https://discord.com/invite/eaFJ2KDJck?source=post_page-----a689ff274952--------------------------------\">Join the Elysia.js Discord\u00a0Server!</a></h3>\n<h3><a href=\"https://discord.com/invite/CXdq2DP29u?source=post_page-----a689ff274952--------------------------------\">Join the Bun Discord\u00a0Server!</a></h3>\n<blockquote>\n<em>Currently, Bun may not be fully compatible with Windows. If you\u2019re using Windows, no worries! You can still enjoy Bun\u2019s powerful features by using </em><strong><em>Windows Subsystem for Linux (WSL)</em></strong><em> or exploring the option of dual-booting a Linux distribution like </em><strong><em>Arch</em></strong><em>. To keep track of when Bun becomes compatible with Windows and other beloved frameworks, feel free to visit the delightful website </em><a href=\"https://is-bun-ready.pages.dev/\"><em>https://is-bun-ready.pages.dev/</em></a><em>. Happy\u00a0coding!</em>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=eefe03088af4\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*zDnq5mgggsRCMFJb\"></figure><p>It\u2019s no secret that JavaScript developers love to reinvent the wheel. We spend countless hours building libraries and frameworks for tasks that have already been solved by existing solutions. But it seems that some developers have taken this trend to the next level and have decided to reinvent the entire runtime\u00a0itself.</p>\n<p><a href=\"https://bun.sh/\">Bun.js</a>, is a new and ambitious JavaScript toolset and runtime that has been making waves in the tech world. It promises to be incredibly fast and is being touted by some as a Node.js killer. In this article, we will explore what Bun is, how it works, and whether it really is as fast as people claim. We\u2019ll also compare it with Node.js and see if it can truly replace it as the go-to JavaScript runtime. Let\u2019s dive\u00a0in!</p>\n<h3>Introduction: The\u00a0Basics</h3>\n<blockquote><em>Development of JavaScript Frameworks Over\u00a0Time</em></blockquote>\n<p>JavaScript was invented by Brendan Eich in 1995 for Netscape 2, and it became the ECMA-262 standard in 1997. With the emergence of Web 2.0 applications such as Gmail, JavaScript became a more serious language. Over time, JS engines in major browsers started providing better support and performance.</p>\n<p>Some notable advancements in the evolution of JS and its tools\u00a0include:</p>\n<ul>\n<li>The release of Node.js in 2009, which uses the V8 engine (Chrome V8), is considered one of the best JS engines to\u00a0date.</li>\n<li>The introduction of Webpack in 2012 to solve bundling issues for large projects.</li>\n<li>The emergence of polyfills and the introduction of Babel in 2014 to solve browser compatibility issues. Polyfills are now obsolete in\u00a02023.</li>\n</ul>\n<p>The original presentation</p>\n<blockquote><em>JavaScript Runtimes: Understanding Runtimes and their\u00a0Basics</em></blockquote>\n<p>Before we dive deeper into JavaScript runtimes, let\u2019s first understand what a <strong>runtime</strong> is. <strong>In programming, a runtime is an environment where the code runs and is executed.</strong> It includes everything that is needed to execute the code, such as libraries, frameworks, and\u00a0tools.</p>\n<p>A JavaScript runtime specifically is an environment where JavaScript code is executed. There are various JavaScript runtimes available in the market today. The most popular one is <strong>Node.js</strong>, which we will discuss in more detail\u00a0later.</p>\n<p>Let\u2019s take an\u00a0example:</p>\n<p><strong>JavaScript code is like fuel, which is used to power the car.</strong> Just like fuel, JavaScript code is inert and cannot do anything on its own. It needs something to process and execute\u00a0it.</p>\n<p>That\u2019s where the runtime environment comes in, which is like the engine of the car. <strong>The runtime environment takes the JavaScript code, processes it, and generates machine code that can be executed by the computer.</strong></p>\n<p>Here are a few things to keep in\u00a0mind:</p>\n<ul>\n<li>The <strong>engine (runtime)</strong> is responsible for the conversion of fuel (JavaScript code) into <strong>raw energy (machine\u00a0code)</strong>.</li>\n<li>The <strong>engine (runtime)</strong> is not the only component required to make the <strong>car (Node.js)</strong> work. It needs other <strong>components (Node APIs)</strong> to perform various\u00a0tasks.</li>\n<li>The engine (runtime) can vary in its quality and efficiency, just like different car <strong>engines can have different power and fuel efficiency.</strong>\n</li>\n</ul>\n<p>To summarize, it\u2019s something like\u00a0this:</p>\n<pre>JavaScript code (fuel) -&gt; Runtime environment (engine) -&gt; Node.js APIs (car)</pre>\n<blockquote><em>What exactly is Node.js\u00a0then?</em></blockquote>\n<p>Overall, JavaScript code alone is not enough to build a functional application. It needs to be processed by a runtime environment like <a href=\"https://nodejs.org/\">Node.js</a> to generate machine code that can be executed by the computer.</p>\n<p><strong>Node.js is a popular JavaScript runtime built on </strong><a href=\"https://v8.dev/\"><strong>Chrome\u2019s V8 engine</strong></a><strong>. It provides a rich set of APIs that allow developers to build server-side applications using JavaScript.</strong> Some popular Node APIs\u00a0include:</p>\n<ul>\n<li>HTTP: Allows building web servers and\u00a0clients.</li>\n<li>File System: Provides APIs for interacting with the file\u00a0system.</li>\n<li>Process: Provides APIs for interacting with the current Node\u00a0process.</li>\n</ul>\n<p>In summary, a JavaScript runtime is an environment where JavaScript code is executed, and Node.js is one of the most popular JavaScript runtimes available today, providing a rich set of APIs for building server-side applications.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*r3db_p8ILfRb4hsc.png\"></figure><p><a href=\"https://litslink.com/blog/node-js-architecture-from-a-to-z\">Node.js Architecture From A to Z. Use Cases, Advantages, Big Players | LITSLINK\u00a0Blog</a></p>\n<blockquote>\n<em>What sets Deno apart from Node.js? A brief introduction to\u00a0</em><a href=\"https://deno.com/\"><em>Deno</em></a><em>.</em>\n</blockquote>\n<p>Deno is a JavaScript runtime environment that is built on top of V8, the same JavaScript engine that powers Google Chrome. <strong>Deno is designed to be a more secure and modern alternative to\u00a0Node.js.</strong></p>\n<p><a href=\"https://github.com/ry\">Ryan Dahl</a>, the creator of Node.js, <strong>has expressed regret about some of the design decisions he made when creating Node.js</strong>. In a 2018 talk at JSConf EU, he apologized for making <strong>Node.js too complex and difficult to use, and for not making it more\u00a0secure.</strong></p>\n<p><strong>Dahl also said that he believes Deno is a better JavaScript runtime than Node.js.</strong> Deno is a newer project that is still under development, but it has a number of features that Dahl believes make it superior to\u00a0Node.js.</p>\n<p>Here are some of the key new additions and improvements to\u00a0Deno:</p>\n<ul>\n<li>Running JavaScript code in a secure sandbox by\u00a0default</li>\n<li>Using URLs to import modules from any\u00a0location</li>\n<li>Supporting TypeScript out of the box without any configuration or extra\u00a0tools</li>\n<li>Using ECMAScript modules as the default module\u00a0system</li>\n<li>Providing a standard library with common utilities and Web\u00a0APIs</li>\n<li>Offering a built-in bundler, test runner, formatter, and\u00a0debugger</li>\n</ul>\n<h3>So what exactly is this \u2018Bun\u2019 we keep hearing\u00a0about?</h3>\n<p>Bun is the new kid on the block. It\u2019s a JavaScript runtime that\u2019s a direct competitor to Node and is still in development, but it\u2019s already managed to <strong>raise $7 million in\u00a0funding!</strong></p>\n<blockquote>\n<em>What makes Bun stand out from the crowd is its </em><strong><em>three </em></strong><em>major\u00a0goals:</em>\n</blockquote>\n<ul>\n<li>To execute JavaScript at a <strong>BLAZINGLY FAST SPEED</strong>\u00a0\ud83d\ude80</li>\n<li>To provide complete and lightning-fast tooling, including a <strong>bundler </strong>and <strong>package\u00a0manager</strong>\n</li>\n<li>Be a <strong>drop-in replacement</strong> for all existing Node\u00a0projects</li>\n</ul>\n<blockquote>\n<em>So how does Bun plan to achieve these goals even though it\u2019s still in the\u00a0</em><a href=\"https://oven.sh/\"><em>Oven</em></a><em>?</em>\n</blockquote>\n<ul>\n<li>\n<strong>Speed</strong>: Bun is built on top of the <a href=\"https://developer.apple.com/documentation/javascriptcore\"><strong>JavaScriptCore</strong></a><strong> </strong>engine, which is the same engine that powers Safari and iOS. This gives Bun a significant performance advantage over other JavaScript runtimes, such as Node.js and\u00a0Deno.</li>\n<li>\n<strong>Tooling</strong>: Bun comes with a built-in bundler, transpiler, and task runner. This means that you can use Bun to build, test, and deploy your JavaScript projects without having to install any additional tools.</li>\n<li>\n<strong>Compatibility</strong>: Bun is designed to be a drop-in replacement for Node.js. This means that you can use Bun to run existing Node.js projects without having to make any changes to your\u00a0code.</li>\n</ul>\n<p>Bun is still in development, but it\u2019s already shaping up to be a powerful new JavaScript runtime.</p>\n<blockquote><em>Here are some of the key features of\u00a0Bun:</em></blockquote>\n<ul>\n<li>\n<strong>Speed</strong>: Bun is <strong>significantly faster</strong> than Node.js and Deno, especially for large applications.</li>\n<li>\n<strong>Memory usage</strong>: Bun uses significantly <strong>less memory than Node.js</strong> and <a href=\"https://deno.com/\">Deno</a>, even for large applications.</li>\n<li>\n<strong>Ease of use</strong>: Bun is <strong>very easy to use</strong>, even for beginners. It has a simple API that is similar to\u00a0Node.js.</li>\n<li>\n<strong>Documentation</strong>: Bun is very <a href=\"https://bun.sh/docs\">well-documented</a>, so it is easy to find help if you need\u00a0it.</li>\n</ul>\n<blockquote>\n<em>How exactly does </em><a href=\"https://developer.apple.com/documentation/javascriptcore\"><em>JavaScriptCore</em></a><em> fit into\u00a0Bun?</em>\n</blockquote>\n<blockquote><em>JavaScriptCore is a JavaScript engine that is used by Safari, Apple\u2019s web\u00a0browser.</em></blockquote>\n<p>Bun uses JavaScriptCore (JSC) as its JavaScript engine, while Chromium uses <a href=\"https://v8.dev/\">V8</a>, Firefox uses <a href=\"https://spidermonkey.dev/\">SpiderMonkey</a>, and Microsoft used Chakra for Internet Explorer but now uses V8 for Edge while <a href=\"https://hermesengine.dev/\">Hermes</a> is used for React\u00a0Native.</p>\n<p>JSC is generally faster than V8, especially for large applications. This is because JSC is written in C++, while V8 is written in JavaScript. C++ is a compiled language, which means that it is converted to machine code before it is executed. This makes C++ code faster than JavaScript code, which is interpreted at\u00a0runtime.</p>\n<p><strong>Bun is built on top of JavaScriptCore, which gives it a number of advantages over other JavaScript runtimes, such as Node.js and\u00a0</strong><a href=\"https://deno.com/\"><strong>Deno</strong></a><strong>.</strong></p>\n<p>Here are some of the benefits of using JavaScriptCore in\u00a0Bun:</p>\n<ul>\n<li>\n<strong>JIT compilation</strong>: Just-In-Time (JIT) compilation is a technique that <strong>compiles JavaScript code to machine code at runtime</strong>. This makes the code run faster, especially for code that is executed frequently.</li>\n<li>\n<strong>Function inlining</strong>: Function inlining is a technique that replaces <strong>function calls with the actual code of the function</strong>. This makes the code run faster, because there is no overhead of calling a function.</li>\n<li>\n<strong>Dead code elimination</strong>: Dead code elimination is a technique that removes code that is never executed. <strong>This makes the code smaller and\u00a0faster.</strong>\n</li>\n<li>\n<strong>Portability</strong>: JavaScriptCore is a cross-platform engine, which means that <strong>Bun can be used on a variety of operating systems.</strong>\n</li>\n</ul>\n<p>Overall, JavaScriptCore is a great choice for a JavaScript engine, and it is one of the reasons why Bun is such a fast and efficient runtime.</p>\n<h3>Unpacking the Main Selling Point: Performance</h3>\n<blockquote><em>How blazingly-fast is\u00a0bun?</em></blockquote>\n<p>Bun is all about speed, and it\u2019s a <strong>key selling point</strong>. Built by <a href=\"https://twitter.com/jarredsumner\">Jarred Sumner</a>, a former frontend engineer at <a href=\"https://stripe.com/\">Stripe</a>, Bun is designed to run most of the world\u2019s JavaScript outside of browsers, bringing performance and complexity enhancements to your infrastructure, as well as better developer productivity through simpler tooling. According to Sumner, <strong>Bun processes about three times more HTTP requests per second than Node.js when rendering React server-side.</strong></p>\n<p><strong>It\u2019s also equipped with WebSocket, ReadableStream, and fetch, and it\u2019s a transpiler, so TypeScript and JSX work out of the\u00a0box.</strong></p>\n<p>Sumner was frustrated by how slow everything was in JavaScript, and he wanted to make it faster. He explored a number of languages to build Bun but ultimately landed on the relatively little-known <a href=\"https://ziglang.org/\"><strong>Zig</strong></a>, which helped him achieve Bun\u2019s impressive speed. Bun also implements Node.js\u2019 module resolution algorithm, which means that <strong>npm packages also work with\u00a0it.</strong></p>\n<p>Jarred Sumner took to Twitter to share some statistics demonstrating how Bun <strong>accelerates existing Node APIs such as websockets, readable streams, file read and write, SQLite, and other features</strong>. He then compares the performance of these features with other similar\u00a0tools:</p>\n<blockquote>\n<em>Bun can install npm packages for a simple Next.js app approximately </em><strong><em>20 times faster </em></strong><em>than Yarn and </em><strong><em>49 times faster</em></strong><em> than npm\u00a0install.</em>\n</blockquote>\n<blockquote><em>Bun\u2019s implementation of the WebSocket client achieves higher throughput than both the \u2018ws\u2019 npm package and Deno\u2019s WebSocket client</em></blockquote>\n<blockquote>\n<em>Bun is equipped with a high-performance</em><strong><em> SQLite\u00a0client</em></strong>\n</blockquote>\n<p>Additionally, Bun has official benchmarks that demonstrate its impressive performance:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/736/0*w1sqH3ULANO9uGNH.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/739/0*2gAWbXDOuO_WkAnN.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/731/0*muVfGE83XTFlEaJE.png\"></figure><p>Bun\u2019s official benchmarks in <a href=\"https://bun.sh/\">https://bun.sh</a></p>\n<p>To sum up, the numbers speak for themselves and Bun is a lightning-fast tool designed to run JavaScript outside of browsers, and it outperforms many other popular tools when it comes to speed and performance.</p>\n<blockquote><em>How is Bun\u00a0fast?</em></blockquote>\n<p>Bun\u2019s speed is a key selling point of the runtime, and it\u2019s no coincidence that it was designed to beat a slow iteration cycle. Founder Jarred Sumner was frustrated with the speed of the iteration cycle in Next.js while developing a game, leading him to experiment with different builders and transpilers. <strong>However, in the end, he developed a runtime that included both, providing faster iteration times.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*qmE7tpZ7hTQJ_C8u.png\"></figure><p><a href=\"https://github.com/ziglang/logo#ziggy-the-ziguana\">ziglang/logo: The official Zig programming language\u00a0logo</a></p>\n<p>One of the unique features of Bun is its use of Zig\u2019s \u201c<strong>comptime</strong>\u201d metaprogramming approach, which allows arbitrary code to be run at compile time. This approach helped Sumner write fast code, and it is an essential factor in Bun\u2019s high performance and some others\u00a0include:</p>\n<ul><li>\n<strong>Use of Zig</strong>: As the creators of Bun state, one of the reasons for its speed is that its core functionality is written in Zig.<strong> The choice to use Zig was based on its low-level control over memory and lack of hidden control flow, which make it much simpler to write fast software.</strong> By compiling to machine code, Zig allows Bun to execute code more quickly and with fewer resources than\u00a0Node.js.</li></ul>\n<h3><a href=\"https://ziglang.org/?source=post_page-----a689ff274952--------------------------------\">Home \u26a1 Zig Programming Language</a></h3>\n<h3><a href=\"https://ziglang.org/?source=post_page-----a689ff274952--------------------------------\">Zig is a general-purpose programming language and toolchain for maintaining robust, optimal and reusable software\u2026</a></h3>\n<p><a href=\"https://ziglang.org/?source=post_page-----a689ff274952--------------------------------\">ziglang.org</a></p>\n<ul>\n<li>\n<strong>Comptime metaprogramming</strong>: Comptime is a metaprogramming approach that allows Bun to run code at compile time. <strong>This helps to speed up parsing and other tasks, resulting in faster performance overall.</strong>\n</li>\n<li>\n<em>Bun uses comptime in the lexical analyzer, called the \u201clexer.\u201d The lexer is responsible for iterating through all of the text to determine if the current token is a valid identifier or a keyword. Because of comptime, Bun uses a bit-set that\u2019s generated at compile time, </em><strong><em>resulting in a 2% performance boost.</em></strong>\n</li>\n</ul>\n<p>In contrast, Node.js is built on top of JavaScript, which can lead to slower performance. <strong>While Node.js does use C++ for some APIs, a lot of the code is in JavaScript.</strong> This can result in performance issues when adding additional JavaScript on top of an already JavaScript-heavy codebase. B<strong>un\u2019s use of Zig/C++ for its lowest levels means that when using JavaScript in Bun, you\u2019re actually using purely Zig/C++ underneath, resulting in super-fast performance.</strong></p>\n<p>In summary, while both Node.js and Bun are useful tools, their approaches to performance differ. Node.js prioritizes ease of use and flexibility, while Bun is designed for speed and performance.</p>\n<h3>What else does Bun\u00a0offer?</h3>\n<p>Bun is an <strong>all-in-one runtime that includes everything</strong> you need, unlike Node, which requires additional tools like Webpack, Babel, Jest, and others. Bun also offers a cohesive and modern developer experience, with features such\u00a0as:</p>\n<ul>\n<li>\n<strong>TypeScript and JSX support out of the box:</strong> You don\u2019t need to install or configure any extra tools to use TypeScript and JSX in your bun.js projects.</li>\n<li>\n<strong>Built-in bundler, transpiler, test runner, and package manager:</strong> You <strong>don\u2019t need to use external tools like webpack, Babel, Jest, or npm</strong> to bundle, transpile, test, and install your JavaScript modules. Bun comes with everything you need to build JavaScript apps. Bun also supports<strong><em>\u00a0.wasm</em></strong> files for <strong>WebAssembly</strong>.</li>\n<li>\n<strong>Node.js and Web APIs compatibility:</strong> You can use hundreds of Node.js and Web APIs in your bun.js projects, such as <strong>fs, path, Buffer, fetch, WebSocket, ReadableStream</strong>, and more. Bun also supports most native Node modules thanks to its implementation of Node-API functions.</li>\n<li>\n<strong>Custom modules for additional functionality and performance:</strong> You can use some built-in modules that bun.js provides to access features that are not available in Node.js or Web APIs, such as <strong><em>bun:sqlite</em></strong> for a <strong>fast SQLite client</strong>, or <strong><em>bun:ffi</em></strong> for a <strong>low-overhead foreign function interface</strong>.</li>\n<li>\n<strong>Compatibility with npm packages and modules:</strong> Bun can find and load modules from the <strong><em>node_modules </em></strong>directory using Node\u2019s resolution algorithm.</li>\n<li>\n<strong>Support for both ESM and CommonJS modules:</strong> Bun can import and export modules using either syntax, but internally it uses ESM for better performance and compatibility.</li>\n<li>\n<strong>Automatic loading of environment variables from\u00a0<em>.env </em>files:</strong> Bun can read and use values from\u00a0.env files to configure your application or pass information to your\u00a0code.</li>\n</ul>\n<p>Bun aims to be a fast, modern, and versatile JavaScript runtime that can run your code anywhere: local, server, or edge. It offers performance and simplicity benefits for your infrastructure, as well as productivity and happiness benefits for your development workflow.</p>\n<blockquote><em>Popular projects supporting Bun</em></blockquote>\n<blockquote>\n<em>Introducing </em><a href=\"https://hono.dev/\"><em>HonoJS</em></a><em>: A Blazingly-fast \ud83d\ude80 Competitor to ExpressJS</em>\n</blockquote>\n<p><strong>HonoJS is a framework for building web applications and services with JavaScript. </strong>It is built on top of the Deno runtime environment, and it provides a number of features that make it easy to build scalable and efficient web applications.</p>\n<p>One of the benefits of HonoJS is that it is very easy to use. The framework provides a number of pre-built components that can be used to quickly and easily build web applications.<strong> For example, the framework provides a pre-built router that can be used to handle HTTP requests</strong>, and a pre-built template engine that can be used to render HTML templates.</p>\n<p>Another benefit of HonoJS is that it is very secure. The framework is designed to be secure by default, and it provides a number of features that can help to protect your web applications from attacks. <strong>For example, the framework provides a pre-built authentication system that can be used to authenticate users, and it provides a pre-built authorization system that can be used to control what users can do with your web applications.</strong></p>\n<p>Finally, HonoJS is very scalable.<strong> The framework is designed to be able to handle large volumes of traffic, and it provides a number of features that can help to improve the performance of your web applications.</strong> For example, the framework provides a pre-built caching system that can be used to cache frequently accessed data, and it provides a pre-built load balancer that can be used to distribute traffic across multiple\u00a0servers.</p>\n<p>Here are some of the benefits of <strong>HonoJS over\u00a0Express</strong>:</p>\n<ul>\n<li>\n<strong>HonoJS is built on top of the Deno runtime environment</strong>, which is a newer and more modern runtime than\u00a0Node.js.</li>\n<li>HonoJS is designed to be more secure than Express. <strong>It does not have access to the filesystem by default</strong>, and it only downloads modules from trusted\u00a0sources.</li>\n<li>HonoJS is designed to be more efficient than Express. <strong>It uses less memory and CPU resources</strong>, which can lead to better performance.</li>\n<li>HonoJS is designed to be <strong>more scalable than Express</strong>. It can handle more traffic and more users, which can make it a better choice for high-traffic applications.</li>\n<li>\n<strong>Bun is a supported runtime environment for HonoJS. This means that HonoJS can be used to build web applications and services on\u00a0Bun</strong>.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*EV0d5DI1fFDHcQBB.png\"></figure><p><a href=\"https://hono.dev/concepts/benchmarks\">Benchmarks\u200a\u2014\u200aHono</a></p>\n<h3><a href=\"https://hono.dev/getting-started/bun?source=post_page-----a689ff274952--------------------------------\">Bun\u200a\u2014\u200aHono</a></h3>\n<h3><a href=\"https://hono.dev/getting-started/bun?source=post_page-----a689ff274952--------------------------------\">Bun is another JavaScript runtime. It\u2019s not Node.js or Deno. Bun includes a trans compiler, we can write the code\u00a0with\u2026</a></h3>\n<p><a href=\"https://hono.dev/getting-started/bun?source=post_page-----a689ff274952--------------------------------\">hono.dev</a></p>\n<blockquote>\n<em>Introducing </em><a href=\"https://elysiajs.com/\"><em>E</em></a><em>lysia: A Blazingly-fast \ud83d\ude80 Competitor to Hono\u00a0\ud83d\ude09</em>\n</blockquote>\n<p>Elysia.js is a web framework built on top of the Bun runtime environment. It is designed to be fast, efficient, and easy to use. Elysia.js is a good choice for developers who want to build web applications that are scalable and\u00a0secure.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/572/0*EOBq0nBno6H1nFhX.png\"></figure><p>Elysia\u2019s benchmarks</p>\n<p>Here are some of the features of Elysia.js:</p>\n<ul>\n<li>\n<strong>Fully type-safe web framework:</strong> Elysia automatically infers the types from your code and validates the incoming requests to ensure type safety. You don\u2019t need to write types or understand TypeScript to use\u00a0Elysia.</li>\n<li>\n<strong>Optimized for Bun:</strong> Elysia leverages the speed and versatility of Bun, which uses JavaScriptCore as its core engine and can run on any platform that supports the Web Standard\u00a0API.</li>\n<li>\n<strong>Familiar syntax like Express:</strong> Elysia has a simple and expressive syntax that resembles Express, one of the most popular web frameworks for Node.js. You can easily create routes, middleware, and controllers with\u00a0Elysia.</li>\n<li>\n<strong>End-to-end type safety with Eden:</strong> Elysia integrates with Eden, a tool that allows you to create a <strong>fully type-safe client for consuming Elysia APIs</strong>. Eden creates a single source of truth for your data structure and eliminates any possible type conflict between TypeScript, actual requests, API documentation, and frontend\u00a0client.</li>\n<li>\n<strong>Documentation in one line with Swagger:</strong> Elysia supports Swagger plugins that can generate API documentation in just one line of code. You don\u2019t need to write any extra comments or annotations to document your APIs with\u00a0Elysia.</li>\n</ul>\n<p>\u2764\ufe0f</p>\n<h3><a href=\"https://elysiajs.com/?source=post_page-----a689ff274952--------------------------------\">Elysia\u200a\u2014\u200aFast, and friendly Bun web frameworks</a></h3>\n<h3>Trying out\u00a0Elysia:</h3>\n<h3><a href=\"https://github.com/vaishnav-mk/elysia-demo?source=post_page-----a689ff274952--------------------------------\">GitHub\u200a\u2014\u200avaishnav-mk/elysia-demo</a></h3>\n<h3><a href=\"https://github.com/vaishnav-mk/elysia-demo?source=post_page-----a689ff274952--------------------------------\">\ud83d\ude33 Demo app: Contact management with SvelteKit/Tailwind frontend &amp; ElysiaJS\u00a0backend</a></h3>\n<blockquote><em>The Backend with\u00a0Elysia</em></blockquote>\n<p>In this demo project, we have the <strong>backend implementation</strong> for a contact management app. The backend code is organized into two files: db.ts and index.ts.</p>\n<p>In db.ts, we define the ContactDB class which handles the database operations for contacts. It utilizes the bun:sqlite package for efficient SQLite database management. The class provides methods for creating, updating, deleting, and retrieving contacts from the database. It also supports searching for contacts based on a query\u00a0string.</p>\n<p>In index.ts, we set up the backend server using the Elysia framework. We leverage the power of Elysia's middleware ecosystem, including @elysiajs/cors for enabling CORS support and @elysiajs/swagger for generating API documentation. The server is configured to listen on port\u00a03000.</p>\n<p><strong>The Elysia framework brings several benefits to the table. It emphasizes efficiency and speed, thanks to its optimized design and use of advanced technologies. Compared to traditional frameworks like Express, Elysia outperforms in terms of handling requests and processing data, leading to better overall performance.</strong></p>\n<p>This demo project showcases the efficiency and speed of Elysia as a backend framework. By utilizing the ContactDB class and the Elysia framework, we can efficiently manage contacts, perform CRUD operations, and provide a robust API for the contact management app.</p>\n<p><strong>In summary, Elysia\u2019s backend implementation for the contact management app offers superior efficiency and speed compared to traditional frameworks like Express. Its optimized design, advanced features, and seamless integration with the ContactDB class make it a powerful choice for building efficient and performant backend applications.</strong></p>\n<blockquote><em>The Frontend with SvelteKit and\u00a0Tailwind</em></blockquote>\n<p>The frontend of this demo project is a sleek and intuitive contact management app built using <strong>SvelteKit and Tailwind CSS</strong>. It seamlessly interacts with the backend to provide a smooth user experience.</p>\n<p><a href=\"https://svelte.dev/\"><strong>SvelteKit</strong></a>, a modern frontend framework, is employed to develop the frontend. It leverages the concept of reactive programming, enabling efficient updates and rendering of the user interface. With SvelteKit, the contact management app benefits from faster loading times and reduced bundle size, resulting in improved performance.</p>\n<p><a href=\"https://tailwindcss.com/\"><strong>Tailwind CSS</strong></a>, a highly customizable CSS framework, is utilized for styling the frontend. It offers a utility-first approach, allowing for rapid development and easy customization. By leveraging Tailwind CSS, the contact management app achieves a visually appealing and responsive design.</p>\n<p>The frontend interacts with the backend through well-defined API endpoints provided by the Elysia backend. It utilizes HTTP requests to perform actions such as creating, updating, and deleting contacts, as well as retrieving contact information. These interactions are seamlessly integrated into the user interface, providing a smooth and intuitive user experience.</p>\n<p>Overall, the frontend of this demo project showcases the power and versatility of SvelteKit and Tailwind CSS. The combination of these technologies, along with the efficient backend implementation, results in a highly performant and user-friendly contact management app.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*ECDznxrZXpmH_hlo.png\"></figure><h3>What the future of Bun\u00a0holds</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*pbQ7SlLRmqKhaP4w.png\"></figure><p>Bun.js has ignited a tidal wave of excitement in the JavaScript community. While still in its early stages and not yet production-ready, this revolutionary tool is captivating developers with its <strong>blazing-fast speed</strong> \ud83d\ude80, robust tooling, and relentless focus on web development.</p>\n<p>With a growing <a href=\"https://discord.com/invite/CXdq2DP29u\">Discord community</a> of over 16k members, the enthusiasm for Bun.js is palpable. It has quickly become a rallying point for JavaScript enthusiasts who eagerly anticipate its full potential. As Bun.js evolves and matures, it is poised to challenge established players and push the boundaries of what is possible in web application development.</p>\n<p><strong>This emerging powerhouse serves as a powerful motivator for existing players like Node.js and Deno to elevate their performance and stay competitive.</strong> The vibrant ecosystem surrounding Bun.js fosters a spirit of innovation and collaboration, inspiring developers to push the boundaries of what can be achieved.</p>\n<p>The future of Bun.js holds great promise. As it continues to evolve, it will empower JavaScript developers and reshape the web development landscape. Together, we are charting a new course towards a more efficient, productive, and exhilarating era of JavaScript development. <strong>Join the Bun.js community and be part of this exciting journey towards the future of web development.</strong></p>\n<h3><a href=\"https://discord.com/invite/eaFJ2KDJck?source=post_page-----a689ff274952--------------------------------\">Join the Elysia.js Discord\u00a0Server!</a></h3>\n<h3><a href=\"https://discord.com/invite/CXdq2DP29u?source=post_page-----a689ff274952--------------------------------\">Join the Bun Discord\u00a0Server!</a></h3>\n<blockquote>\n<em>Currently, Bun may not be fully compatible with Windows. If you\u2019re using Windows, no worries! You can still enjoy Bun\u2019s powerful features by using </em><strong><em>Windows Subsystem for Linux (WSL)</em></strong><em> or exploring the option of dual-booting a Linux distribution like </em><strong><em>Arch</em></strong><em>. To keep track of when Bun becomes compatible with Windows and other beloved frameworks, feel free to visit the delightful website </em><a href=\"https://is-bun-ready.pages.dev/\"><em>https://is-bun-ready.pages.dev/</em></a><em>. Happy\u00a0coding!</em>\n</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=eefe03088af4\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["nodejs","javascript","zig","bunjs"]}]}